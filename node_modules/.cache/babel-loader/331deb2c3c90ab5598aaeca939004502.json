{"ast":null,"code":"var _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/extensions/charts/amchart/pie/Components/PieChartWithBrokenDownSlices.js\";\nimport React from \"react\";\nimport AmCharts from \"@amcharts/amcharts3-react\";\n\nvar PieChartWithBrokenDownSlices = function PieChartWithBrokenDownSlices() {\n  var selected;\n  var types = [{\n    type: \"Fossil Energy\",\n    percent: 70,\n    color: \"#ff9e01\",\n    subs: [{\n      type: \"Oil\",\n      percent: 15\n    }, {\n      type: \"Coal\",\n      percent: 35\n    }, {\n      type: \"Nuclear\",\n      percent: 20\n    }]\n  }, {\n    type: \"Green Energy\",\n    percent: 30,\n    color: \"#b0de09\",\n    subs: [{\n      type: \"Hydro\",\n      percent: 15\n    }, {\n      type: \"Wind\",\n      percent: 10\n    }, {\n      type: \"Other\",\n      percent: 5\n    }]\n  }];\n\n  function generateChartData() {\n    var chartData = [];\n\n    for (var i = 0; i < types.length; i++) {\n      if (i === selected) {\n        for (var x = 0; x < types[i].subs.length; x++) {\n          chartData.push({\n            type: types[i].subs[x].type,\n            percent: types[i].subs[x].percent,\n            color: types[i].color,\n            pulled: true\n          });\n        }\n      } else {\n        chartData.push({\n          type: types[i].type,\n          percent: types[i].percent,\n          color: types[i].color,\n          id: i\n        });\n      }\n    }\n\n    return chartData;\n  }\n\n  var config = {\n    \"type\": \"pie\",\n    \"theme\": \"light\",\n    \"dataProvider\": generateChartData(),\n    \"labelText\": \"[[title]]: [[value]]\",\n    \"balloonText\": \"[[title]]: [[value]]\",\n    \"titleField\": \"type\",\n    \"valueField\": \"percent\",\n    \"outlineColor\": \"#FFFFFF\",\n    \"outlineAlpha\": 0.8,\n    \"outlineThickness\": 2,\n    \"colorField\": \"color\",\n    \"pulledField\": \"pulled\",\n    \"titles\": [{\n      \"text\": \"Click a slice to see the details\"\n    }],\n    \"listeners\": [{\n      \"event\": \"clickSlice\",\n      \"method\": function method(event) {\n        var chart = event.chart;\n\n        if (event.dataItem.dataContext.id !== undefined) {\n          selected = event.dataItem.dataContext.id;\n        } else {\n          selected = undefined;\n        }\n\n        chart.dataProvider = generateChartData();\n        chart.validateData();\n      }\n    }],\n    \"export\": {\n      \"enabled\": true\n    }\n  };\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(AmCharts.React, {\n    style: {\n      width: \"100%\",\n      height: \"500px\"\n    },\n    options: config,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }));\n};\n\nexport default PieChartWithBrokenDownSlices;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/extensions/charts/amchart/pie/Components/PieChartWithBrokenDownSlices.js"],"names":["React","AmCharts","PieChartWithBrokenDownSlices","selected","types","type","percent","color","subs","generateChartData","chartData","i","length","x","push","pulled","id","config","event","chart","dataItem","dataContext","undefined","dataProvider","validateData","width","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport AmCharts from \"@amcharts/amcharts3-react\";\n\nconst PieChartWithBrokenDownSlices = () => {\n\n  let selected;\n\n  const types = [{\n    type: \"Fossil Energy\",\n    percent: 70,\n    color: \"#ff9e01\",\n    subs: [{\n      type: \"Oil\",\n      percent: 15\n    }, {\n      type: \"Coal\",\n      percent: 35\n    }, {\n      type: \"Nuclear\",\n      percent: 20\n    }]\n  }, {\n    type: \"Green Energy\",\n    percent: 30,\n    color: \"#b0de09\",\n    subs: [{\n      type: \"Hydro\",\n      percent: 15\n    }, {\n      type: \"Wind\",\n      percent: 10\n    }, {\n      type: \"Other\",\n      percent: 5\n    }]\n  }];\n\n  function generateChartData() {\n    let chartData = [];\n    for (let i = 0; i < types.length; i++) {\n      if (i === selected) {\n        for (let x = 0; x < types[i].subs.length; x++) {\n          chartData.push({\n            type: types[i].subs[x].type,\n            percent: types[i].subs[x].percent,\n            color: types[i].color,\n            pulled: true\n          });\n        }\n      } else {\n        chartData.push({\n          type: types[i].type,\n          percent: types[i].percent,\n          color: types[i].color,\n          id: i\n        });\n      }\n    }\n    return chartData;\n  }\n\n  const config = {\n    \"type\": \"pie\",\n    \"theme\": \"light\",\n\n    \"dataProvider\": generateChartData(),\n    \"labelText\": \"[[title]]: [[value]]\",\n    \"balloonText\": \"[[title]]: [[value]]\",\n    \"titleField\": \"type\",\n    \"valueField\": \"percent\",\n    \"outlineColor\": \"#FFFFFF\",\n    \"outlineAlpha\": 0.8,\n    \"outlineThickness\": 2,\n    \"colorField\": \"color\",\n    \"pulledField\": \"pulled\",\n    \"titles\": [{\n      \"text\": \"Click a slice to see the details\"\n    }],\n    \"listeners\": [{\n      \"event\": \"clickSlice\",\n      \"method\": function (event) {\n        var chart = event.chart;\n        if (event.dataItem.dataContext.id !== undefined) {\n          selected = event.dataItem.dataContext.id;\n        } else {\n          selected = undefined;\n        }\n        chart.dataProvider = generateChartData();\n        chart.validateData();\n      }\n    }],\n    \"export\": {\n      \"enabled\": true\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <AmCharts.React style={{width: \"100%\", height: \"500px\"}} options={config}/>\n    </div>\n  )\n}\n\nexport default PieChartWithBrokenDownSlices;\n"]},"metadata":{},"sourceType":"module"}