{"ast":null,"code":"import _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/dataEntry/Form/Registration.js\";\nimport React, { Component } from \"react\";\nimport { AutoComplete, Button, Card, Cascader, Checkbox, Col, Form, Icon, Input, Row, Select, Tooltip } from \"antd\";\nvar FormItem = Form.Item;\nvar Option = Select.Option;\nvar AutoCompleteOption = AutoComplete.Option;\nvar residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\n\nvar Registration =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Registration, _Component);\n\n  function Registration() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Registration);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Registration)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.handleWebsiteChange = function (value) {\n      var autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(function (domain) {\n          return \"\".concat(value).concat(domain);\n        });\n      }\n\n      _this.setState({\n        autoCompleteResult: autoCompleteResult\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Registration, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var autoCompleteResult = this.state.autoCompleteResult;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 16,\n            offset: 8\n          }\n        }\n      };\n      var prefixSelector = getFieldDecorator('prefix', {\n        initialValue: '86'\n      })(React.createElement(Select, {\n        style: {\n          width: 70\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Option, {\n        value: \"86\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"+86\"), React.createElement(Option, {\n        value: \"87\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"+87\")));\n      var websiteOptions = autoCompleteResult.map(function (website) {\n        return React.createElement(AutoCompleteOption, {\n          key: website,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, website);\n      });\n      return React.createElement(Card, {\n        className: \"gx-card\",\n        title: \"Registration Form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"E-mail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), getFieldDecorator('email', {\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }]\n      })(React.createElement(Input, {\n        id: \"email1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Confirm Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n          title: \"What do you want others to call you?\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"question-circle-o\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), getFieldDecorator('nickname', {\n        rules: [{\n          required: true,\n          message: 'Please input your nickname!',\n          whitespace: true\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Habitual Residence\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), getFieldDecorator('residence', {\n        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n        rules: [{\n          type: 'array',\n          required: true,\n          message: 'Please select your habitual residence!'\n        }]\n      })(React.createElement(Cascader, {\n        options: residences,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Phone Number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), getFieldDecorator('phone', {\n        rules: [{\n          required: true,\n          message: 'Please input your phone number!'\n        }]\n      })(React.createElement(Input, {\n        addonBefore: prefixSelector,\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Website\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), getFieldDecorator('website', {\n        rules: [{\n          required: true,\n          message: 'Please input website!'\n        }]\n      })(React.createElement(AutoComplete, {\n        dataSource: websiteOptions,\n        onChange: this.handleWebsiteChange,\n        placeholder: \"website\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Captcha\",\n        extra: \"We must make sure that your are a human.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Col, {\n        span: 24,\n        sm: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, getFieldDecorator('captcha', {\n        rules: [{\n          required: true,\n          message: 'Please input the captcha you got!'\n        }]\n      })(React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        span: 24,\n        sm: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Get captcha\")))), React.createElement(FormItem, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), getFieldDecorator('agreement', {\n        valuePropName: 'checked'\n      })(React.createElement(Checkbox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"I have read the \", React.createElement(\"span\", {\n        className: \"gx-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, \"agreement\")))), React.createElement(FormItem, Object.assign({}, tailFormItemLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Register\"))));\n    }\n  }]);\n\n  return Registration;\n}(Component);\n\nvar RegistrationForm = Form.create()(Registration);\nexport default RegistrationForm;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/dataEntry/Form/Registration.js"],"names":["React","Component","AutoComplete","Button","Card","Cascader","Checkbox","Col","Form","Icon","Input","Row","Select","Tooltip","FormItem","Item","Option","AutoCompleteOption","residences","value","label","children","Registration","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","rules","type","message","required","validator","whitespace","valuePropName","RegistrationForm","create"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {AutoComplete, Button, Card, Cascader, Checkbox, Col, Form, Icon, Input, Row, Select, Tooltip} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake',\n    }],\n  }],\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men',\n    }],\n  }],\n}];\n\n\nclass Registration extends Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  }\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({confirmDirty: this.state.confirmDirty || !!value});\n  }\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], {force: true});\n    }\n    callback();\n  }\n  handleWebsiteChange = (value) => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({autoCompleteResult});\n  }\n\n  render() {\n    const {getFieldDecorator} = this.props.form;\n    const {autoCompleteResult} = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: {span: 24},\n        sm: {span: 8},\n      },\n      wrapperCol: {\n        xs: {span: 24},\n        sm: {span: 16},\n      },\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 16,\n          offset: 8,\n        },\n      },\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86',\n    })(\n      <Select style={{width: 70}}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>\n    );\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <Card className=\"gx-card\" title=\"Registration Form\">\n        <Form onSubmit={this.handleSubmit}>\n          <FormItem\n            {...formItemLayout}\n            label=\"E-mail\"\n          >\n            {getFieldDecorator('email', {\n              rules: [{\n                type: 'email', message: 'The input is not valid E-mail!',\n              }, {\n                required: true, message: 'Please input your E-mail!',\n              }],\n            })(\n              <Input id=\"email1\"/>\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label=\"Password\"\n          >\n            {getFieldDecorator('password', {\n              rules: [{\n                required: true, message: 'Please input your password!',\n              }, {\n                validator: this.validateToNextPassword,\n              }],\n            })(\n              <Input type=\"password\"/>\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label=\"Confirm Password\"\n          >\n            {getFieldDecorator('confirm', {\n              rules: [{\n                required: true, message: 'Please confirm your password!',\n              }, {\n                validator: this.compareToFirstPassword,\n              }],\n            })(\n              <Input type=\"password\" onBlur={this.handleConfirmBlur}/>\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label={(\n              <span>\n              Nickname&nbsp;\n                <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\"/>\n              </Tooltip>\n            </span>\n            )}\n          >\n            {getFieldDecorator('nickname', {\n              rules: [{required: true, message: 'Please input your nickname!', whitespace: true}],\n            })(\n              <Input/>\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label=\"Habitual Residence\"\n          >\n            {getFieldDecorator('residence', {\n              initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n              rules: [{type: 'array', required: true, message: 'Please select your habitual residence!'}],\n            })(\n              <Cascader options={residences}/>\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label=\"Phone Number\"\n          >\n            {getFieldDecorator('phone', {\n              rules: [{required: true, message: 'Please input your phone number!'}],\n            })(\n              <Input addonBefore={prefixSelector} style={{width: '100%'}}/>\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label=\"Website\"\n          >\n            {getFieldDecorator('website', {\n              rules: [{required: true, message: 'Please input website!'}],\n            })(\n              <AutoComplete\n                dataSource={websiteOptions}\n                onChange={this.handleWebsiteChange}\n                placeholder=\"website\"\n              >\n                <Input/>\n              </AutoComplete>\n            )}\n          </FormItem>\n          <FormItem\n            {...formItemLayout}\n            label=\"Captcha\"\n            extra=\"We must make sure that your are a human.\"\n          >\n            <Row>\n              <Col span={24} sm={12}>\n                {getFieldDecorator('captcha', {\n                  rules: [{required: true, message: 'Please input the captcha you got!'}],\n                })(\n                  <Input/>\n                )}\n              </Col>\n              <Col span={24} sm={12}>\n                <Button>Get captcha</Button>\n              </Col>\n            </Row>\n          </FormItem>\n          <FormItem {...tailFormItemLayout}>\n            {getFieldDecorator('agreement', {\n              valuePropName: 'checked',\n            })(\n              <Checkbox>I have read the <span className=\"gx-link\">agreement</span></Checkbox>\n            )}\n          </FormItem>\n          <FormItem {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n          </FormItem>\n        </Form>\n      </Card>\n    );\n  }\n\n}\n\nconst RegistrationForm = Form.create()(Registration);\nexport default RegistrationForm;\n"]},"metadata":{},"sourceType":"module"}