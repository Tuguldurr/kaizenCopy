{"ast":null,"code":"import _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/customViews/userAuth/ResetPassword/index.js\";\nimport React, { Component } from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport IntlMessages from \"util/IntlMessages\";\nvar FormItem = Form.Item;\n\nvar ResetPassword =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResetPassword, _Component);\n\n  function ResetPassword() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResetPassword);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResetPassword)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.props.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    return _this;\n  }\n\n  _createClass(ResetPassword, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        className: \"gx-login-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-login-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-login-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require(\"assets/images/logo-white.png\"),\n        alt: \"wieldy\",\n        title: \"wieldy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"gx-mb-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Reset Password\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"appModule.enterPasswordReset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }))), React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        className: \"gx-login-form gx-form-row0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(FormItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(Input, {\n        type: \"password\",\n        placeholder: \"New Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }))), React.createElement(FormItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input, {\n        placeholder: \"Retype New Password\",\n        type: \"password\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }))), React.createElement(FormItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"app.userAuth.reset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ResetPassword;\n}(Component);\n\nvar WrappedResetPasswordForm = Form.create()(ResetPassword);\nexport default WrappedResetPasswordForm;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/customViews/userAuth/ResetPassword/index.js"],"names":["React","Component","Button","Form","Input","IntlMessages","FormItem","Item","ResetPassword","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","compareToFirstPassword","rule","value","callback","getFieldValue","validateToNextPassword","confirmDirty","force","getFieldDecorator","require","rules","required","message","validator","handleConfirmBlur","WrappedResetPasswordForm","create"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Form, Input} from \"antd\";\nimport IntlMessages from \"util/IntlMessages\";\n\nconst FormItem = Form.Item;\n\n\nclass ResetPassword extends Component {\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.props.confirmDirty) {\n      form.validateFields(['confirm'], {force: true});\n    }\n    callback();\n  };\n\n  render() {\n    const {getFieldDecorator} = this.props.form;\n\n    return (\n      <div className=\"gx-login-container\">\n        <div className=\"gx-login-content\">\n\n          <div className=\"gx-login-header\">\n            <img src={require(\"assets/images/logo-white.png\")} alt=\"wieldy\" title=\"wieldy\"/>\n          </div>\n          <div className=\"gx-mb-4\">\n            <h2>Reset Password</h2>\n            <p><IntlMessages id=\"appModule.enterPasswordReset\"/></p>\n          </div>\n\n\n          <Form onSubmit={this.handleSubmit} className=\"gx-login-form gx-form-row0\">\n\n            <FormItem>\n              {getFieldDecorator('password', {\n                rules: [{\n                  required: true, message: 'Please input your password!',\n                }, {\n                  validator: this.validateToNextPassword,\n                }],\n              })(\n                <Input type=\"password\" placeholder=\"New Password\"/>\n              )}\n            </FormItem>\n\n            <FormItem>\n              {getFieldDecorator('confirm', {\n                rules: [{\n                  required: true, message: 'Please confirm your password!',\n                }, {\n                  validator: this.compareToFirstPassword,\n                }],\n              })(\n                <Input placeholder=\"Retype New Password\" type=\"password\" onBlur={this.handleConfirmBlur}/>\n              )}\n            </FormItem>\n\n            <FormItem>\n              <Button type=\"primary\" htmlType=\"submit\">\n                <IntlMessages id=\"app.userAuth.reset\"/>\n              </Button>\n            </FormItem>\n          </Form>\n\n\n        </div>\n      </div>\n    );\n  }\n}\n\nconst WrappedResetPasswordForm = Form.create()(ResetPassword);\n\nexport default (WrappedResetPasswordForm);\n"]},"metadata":{},"sourceType":"module"}