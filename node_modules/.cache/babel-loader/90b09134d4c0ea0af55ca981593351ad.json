{"ast":null,"code":"import _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/inBuiltApps/FirebaseCRUD/index.js\";\nimport React, { Component } from \"react\";\nimport { Button, Drawer } from \"antd\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport ContactList from \"./ContactList\";\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\nimport InfoView from \"components/InfoView/index\";\nimport AddContact from \"./AddContact\";\nimport IntlMessages from \"util/IntlMessages\";\nimport { connect } from \"react-redux\";\nimport _ from \"lodash\";\nimport { onAddContact, onDeleteContact, onGetAllContact, onUpdateContact } from \"../../../appRedux/actions/Contact\";\nvar contactId = 723812738;\nvar filterOptions = [{\n  id: 1,\n  name: 'All contacts',\n  icon: 'all-contacts'\n}, {\n  id: 2,\n  name: 'Frequently contacted',\n  icon: 'frequent'\n}, {\n  id: 3,\n  name: 'Starred contacts',\n  icon: 'star'\n}];\n\nvar FirebaseCRUD =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FirebaseCRUD, _Component);\n\n  function FirebaseCRUD() {\n    var _this;\n\n    _classCallCheck(this, FirebaseCRUD);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FirebaseCRUD).call(this));\n\n    _this.ContactSideBar = function (user) {\n      return React.createElement(\"div\", {\n        className: \"gx-module-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-side-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-contacts gx-mr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"chat.contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"gx-module-side-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(CustomScrollbars, {\n        className: \"gx-module-side-scroll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-add-task\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: _this.onAddContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-add gx-mr-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Add New Contact\"))), React.createElement(\"div\", {\n        className: \"gx-module-side-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"gx-module-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, filterOptions.map(function (option) {\n        return React.createElement(\"li\", {\n          key: option.id,\n          className: \"gx-nav-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"gx-link \".concat(option.id === _this.state.selectedSectionId ? 'active' : ''),\n          onClick: _this.onFilterOptionSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)), option),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"icon icon-\".concat(option.icon),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, option.name)));\n      }))))));\n    };\n\n    _this.addFavourite = function (id, data) {\n      var contact = data;\n      contact.starred = !data.starred;\n\n      _this.props.onUpdateContact(id, contact);\n    };\n\n    _this.onAddContact = function () {\n      _this.setState({\n        addContactState: true\n      });\n    };\n\n    _this.onContactClose = function () {\n      _this.setState({\n        addContactState: false\n      });\n    };\n\n    _this.onFilterOptionSelect = function (option) {\n      switch (option.name) {\n        case 'All contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact\n            });\n\n            break;\n          }\n\n        case 'Frequently contacted':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _.filter(_this.state.allContact, function (contact, key) {\n                return contact.frequently;\n              })\n            });\n\n            break;\n          }\n\n        case 'Starred contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _.filter(_this.state.allContact, function (contact) {\n                return contact.starred;\n              })\n            });\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onSaveContact = function (id, data) {\n      if (id) {\n        _this.props.onUpdateContact(id, data);\n      } else {\n        _this.props.onAddContact(data);\n      }\n    };\n\n    _this.onDeleteContact = function (data) {\n      _this.props.onDeleteContact(data);\n    };\n\n    _this.filterContact = function (userName) {\n      var filterOption = _this.state.filterOption;\n\n      if (userName === '') {\n        _this.setState({\n          contactList: _this.state.allContact\n        });\n      } else {\n        var filterContact = _.filter(_this.state.allContact, function (contact) {\n          return contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1;\n        });\n\n        if (filterOption === 'All contacts') {\n          _this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.frequently;\n            })\n          });\n        } else if (filterOption === 'Starred contacts') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.starred;\n            })\n          });\n        }\n      }\n    };\n\n    _this.handleRequestClose = function () {\n      _this.setState({\n        showMessage: false\n      });\n    };\n\n    _this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: [],\n      contactList: [],\n      selectedContact: null,\n      addContactState: false\n    };\n    return _this;\n  }\n\n  _createClass(FirebaseCRUD, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.onGetAllContact();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(\"contactList\", nextProps.contactList);\n\n      if (nextProps.contactList) {\n        this.setState({\n          allContact: nextProps.contactList,\n          contactList: nextProps.contactList\n        });\n      }\n    }\n  }, {\n    key: \"updateContactUser\",\n    value: function updateContactUser(evt) {\n      this.setState({\n        searchUser: evt.target.value\n      });\n      this.filterContact(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          contactList = _this$state.contactList,\n          addContactState = _this$state.addContactState,\n          drawerState = _this$state.drawerState,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      return React.createElement(\"div\", {\n        className: \"gx-main-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-app-module\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, this.ContactSideBar())), React.createElement(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, this.ContactSideBar(user)), React.createElement(\"div\", {\n        className: \"gx-module-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-box-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      })), React.createElement(AppModuleHeader, {\n        placeholder: \"Search contact\",\n        notification: false,\n        apps: false,\n        user: this.state.user,\n        onChange: this.updateContactUser.bind(this),\n        value: this.state.searchUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"gx-module-box-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-box-topbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(CustomScrollbars, {\n        className: \"gx-module-content-scroll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, contactList.length === 0 ? React.createElement(\"div\", {\n        className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, noContentFoundMessage) : React.createElement(ContactList, {\n        contactList: contactList,\n        addFavourite: this.addFavourite,\n        onDeleteContact: this.onDeleteContact.bind(this),\n        onSaveContact: this.onSaveContact.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }))))), React.createElement(AddContact, {\n        open: addContactState,\n        contact: {\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'starred': false,\n          'frequently': false\n        },\n        onSaveContact: this.onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(InfoView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return FirebaseCRUD;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var contact = _ref.contact;\n  var contactList = contact.contactList,\n      selectedContact = contact.selectedContact;\n  return {\n    contactList: contactList,\n    selectedContact: selectedContact\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onGetAllContact: onGetAllContact,\n  onAddContact: onAddContact,\n  onUpdateContact: onUpdateContact,\n  onDeleteContact: onDeleteContact\n})(FirebaseCRUD);","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/inBuiltApps/FirebaseCRUD/index.js"],"names":["React","Component","Button","Drawer","CustomScrollbars","ContactList","AppModuleHeader","InfoView","AddContact","IntlMessages","connect","_","onAddContact","onDeleteContact","onGetAllContact","onUpdateContact","contactId","filterOptions","id","name","icon","FirebaseCRUD","ContactSideBar","user","map","option","state","selectedSectionId","onFilterOptionSelect","bind","addFavourite","data","contact","starred","props","setState","addContactState","onContactClose","filterOption","contactList","allContact","filter","key","frequently","onSaveContact","filterContact","userName","toLowerCase","indexOf","handleRequestClose","showMessage","noContentFoundMessage","alertMessage","drawerState","email","avatar","searchUser","selectedContact","nextProps","console","log","evt","target","value","onToggleDrawer","updateContactUser","length","mapStateToProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA6B,MAA7B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,YAAR,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,eAAxD,QAA8E,mCAA9E;AAEA,IAAIC,SAAS,GAAG,SAAhB;AAEA,IAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,cAFR;AAGEC,EAAAA,IAAI,EAAE;AAHR,CADoB,EAKjB;AACDF,EAAAA,EAAE,EAAE,CADH;AAEDC,EAAAA,IAAI,EAAE,sBAFL;AAGDC,EAAAA,IAAI,EAAE;AAHL,CALiB,EAUjB;AAEDF,EAAAA,EAAE,EAAE,CAFH;AAGDC,EAAAA,IAAI,EAAE,kBAHL;AAIDC,EAAAA,IAAI,EAAE;AAJL,CAViB,CAAtB;;IAkBMC,Y;;;;;AAGJ,0BAAc;AAAA;;AAAA;;AACZ;;AADY,UAoCdC,cApCc,GAoCG,UAACC,IAAD,EAAU;AACzB,aAAO;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACL;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,4BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,oBAAC,YAAD;AAAc,QAAA,EAAE,EAAC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,CAFF,CADF,CADK,EAQL;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,SAAS,EAAC,uBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,sBAAlB;AAAyC,QAAA,IAAI,EAAC,SAA9C;AAAwD,sBAAW,KAAnE;AACQ,QAAA,OAAO,EAAE,MAAKX,YADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAG,QAAA,SAAS,EAAC,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAHF,CADF,CADF,EAQE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGK,aAAa,CAACO,GAAd,CAAkB,UAAAC,MAAM;AAAA,eAAI;AAAI,UAAA,GAAG,EAAEA,MAAM,CAACP,EAAhB;AAAoB,UAAA,SAAS,EAAC,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACzB;AACE,UAAA,SAAS,oBAAaO,MAAM,CAACP,EAAP,KAAc,MAAKQ,KAAL,CAAWC,iBAAzB,GAA6C,QAA7C,GAAwD,EAArE,CADX;AACsF,UAAA,OAAO,EAC3F,MAAKC,oBAAL,CAA0BC,IAA1B,wDAAqCJ,MAArC,CAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIE;AAAG,UAAA,SAAS,sBAAeA,MAAM,CAACL,IAAtB,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOK,MAAM,CAACN,IAAd,CALF,CADyB,CAAJ;AAAA,OAAxB,CADH,CADF,CARF,CADF,CARK,CAAP;AAoCD,KAzEa;;AAAA,UA2EdW,YA3Ec,GA2EC,UAACZ,EAAD,EAAKa,IAAL,EAAc;AAC3B,UAAIC,OAAO,GAAGD,IAAd;AACAC,MAAAA,OAAO,CAACC,OAAR,GAAkB,CAACF,IAAI,CAACE,OAAxB;;AACA,YAAKC,KAAL,CAAWnB,eAAX,CAA2BG,EAA3B,EAA+Bc,OAA/B;AACD,KA/Ea;;AAAA,UAiFdpB,YAjFc,GAiFC,YAAM;AACnB,YAAKuB,QAAL,CAAc;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD,KAnFa;;AAAA,UAoFdC,cApFc,GAoFG,YAAM;AACrB,YAAKF,QAAL,CAAc;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAd;AACD,KAtFa;;AAAA,UAuFdR,oBAvFc,GAuFS,UAACH,MAAD,EAAY;AACjC,cAAQA,MAAM,CAACN,IAAf;AACE,aAAK,cAAL;AAAqB;AACnB,kBAAKgB,QAAL,CAAc;AACZR,cAAAA,iBAAiB,EAAEF,MAAM,CAACP,EADd;AAEZoB,cAAAA,YAAY,EAAEb,MAAM,CAACN,IAFT;AAGZoB,cAAAA,WAAW,EAAE,MAAKb,KAAL,CAAWc;AAHZ,aAAd;;AAKA;AACD;;AACD,aAAK,sBAAL;AAA6B;AAC3B,kBAAKL,QAAL,CAAc;AACZR,cAAAA,iBAAiB,EAAEF,MAAM,CAACP,EADd;AAEZoB,cAAAA,YAAY,EAAEb,MAAM,CAACN,IAFT;AAGZoB,cAAAA,WAAW,EAAE5B,CAAC,CAAC8B,MAAF,CAAS,MAAKf,KAAL,CAAWc,UAApB,EAAgC,UAACR,OAAD,EAAUU,GAAV;AAAA,uBAAkBV,OAAO,CAACW,UAA1B;AAAA,eAAhC;AAHD,aAAd;;AAKA;AACD;;AACD,aAAK,kBAAL;AAAyB;AACvB,kBAAKR,QAAL,CAAc;AACZR,cAAAA,iBAAiB,EAAEF,MAAM,CAACP,EADd;AAEZoB,cAAAA,YAAY,EAAEb,MAAM,CAACN,IAFT;AAGZoB,cAAAA,WAAW,EAAE5B,CAAC,CAAC8B,MAAF,CAAS,MAAKf,KAAL,CAAWc,UAApB,EAAgC,UAACR,OAAD;AAAA,uBAAaA,OAAO,CAACC,OAArB;AAAA,eAAhC;AAHD,aAAd;;AAKA;AACD;;AACD;AACE;AA1BJ;AA6BD,KArHa;;AAAA,UAsHdW,aAtHc,GAsHE,UAAC1B,EAAD,EAAKa,IAAL,EAAc;AAC5B,UAAIb,EAAJ,EAAQ;AACN,cAAKgB,KAAL,CAAWnB,eAAX,CAA2BG,EAA3B,EAA+Ba,IAA/B;AACD,OAFD,MAEO;AACL,cAAKG,KAAL,CAAWtB,YAAX,CAAwBmB,IAAxB;AACD;AACF,KA5Ha;;AAAA,UA6HdlB,eA7Hc,GA6HI,UAACkB,IAAD,EAAU;AAC1B,YAAKG,KAAL,CAAWrB,eAAX,CAA2BkB,IAA3B;AACD,KA/Ha;;AAAA,UAgIdc,aAhIc,GAgIE,UAACC,QAAD,EAAc;AAAA,UACrBR,YADqB,GACL,MAAKZ,KADA,CACrBY,YADqB;;AAE5B,UAAIQ,QAAQ,KAAK,EAAjB,EAAqB;AACnB,cAAKX,QAAL,CAAc;AAACI,UAAAA,WAAW,EAAE,MAAKb,KAAL,CAAWc;AAAzB,SAAd;AACD,OAFD,MAEO;AACL,YAAMK,aAAa,GAAGlC,CAAC,CAAC8B,MAAF,CAAS,MAAKf,KAAL,CAAWc,UAApB,EAAgC,UAACR,OAAD;AAAA,iBACpDA,OAAO,CAACb,IAAR,CAAa4B,WAAb,GAA2BC,OAA3B,CAAmCF,QAAQ,CAACC,WAAT,EAAnC,IAA6D,CAAC,CADV;AAAA,SAAhC,CAAtB;;AAEA,YAAIT,YAAY,KAAK,cAArB,EAAqC;AACnC,gBAAKH,QAAL,CAAc;AAACI,YAAAA,WAAW,EAAEM;AAAd,WAAd;AACD,SAFD,MAEO,IAAIP,YAAY,KAAK,sBAArB,EAA6C;AAClD,gBAAKH,QAAL,CAAc;AAACI,YAAAA,WAAW,EAAEM,aAAa,CAACJ,MAAd,CAAqB,UAACT,OAAD;AAAA,qBAAaA,OAAO,CAACW,UAArB;AAAA,aAArB;AAAd,WAAd;AAED,SAHM,MAGA,IAAIL,YAAY,KAAK,kBAArB,EAAyC;AAC9C,gBAAKH,QAAL,CAAc;AAACI,YAAAA,WAAW,EAAEM,aAAa,CAACJ,MAAd,CAAqB,UAACT,OAAD;AAAA,qBAAaA,OAAO,CAACC,OAArB;AAAA,aAArB;AAAd,WAAd;AACD;AACF;AACF,KAhJa;;AAAA,UAiJdgB,kBAjJc,GAiJO,YAAM;AACzB,YAAKd,QAAL,CAAc;AACZe,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KArJa;;AAEZ,UAAKxB,KAAL,GAAa;AACXyB,MAAAA,qBAAqB,EAAE,qCADZ;AAEXC,MAAAA,YAAY,EAAE,EAFH;AAGXF,MAAAA,WAAW,EAAE,KAHF;AAIXvB,MAAAA,iBAAiB,EAAE,CAJR;AAKX0B,MAAAA,WAAW,EAAE,KALF;AAMX9B,MAAAA,IAAI,EAAE;AACJJ,QAAAA,IAAI,EAAE,gBADF;AAEJmC,QAAAA,KAAK,EAAE,4BAFH;AAGJC,QAAAA,MAAM,EAAE;AAHJ,OANK;AAWXC,MAAAA,UAAU,EAAE,EAXD;AAYXlB,MAAAA,YAAY,EAAE,cAZH;AAaXE,MAAAA,UAAU,EAAE,EAbD;AAcXD,MAAAA,WAAW,EAAE,EAdF;AAeXkB,MAAAA,eAAe,EAAE,IAfN;AAgBXrB,MAAAA,eAAe,EAAE;AAhBN,KAAb;AAFY;AAoBb;;;;yCAEoB;AACnB,WAAKF,KAAL,CAAWpB,eAAX;AACD;;;8CAEyB4C,S,EAAW;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,SAAS,CAACnB,WAArC;;AACA,UAAImB,SAAS,CAACnB,WAAd,EAA2B;AACzB,aAAKJ,QAAL,CAAc;AACZK,UAAAA,UAAU,EAAEkB,SAAS,CAACnB,WADV;AAEZA,UAAAA,WAAW,EAAEmB,SAAS,CAACnB;AAFX,SAAd;AAID;AACF;;;sCAqHiBsB,G,EAAK;AACrB,WAAK1B,QAAL,CAAc;AACZqB,QAAAA,UAAU,EAAEK,GAAG,CAACC,MAAJ,CAAWC;AADX,OAAd;AAGA,WAAKlB,aAAL,CAAmBgB,GAAG,CAACC,MAAJ,CAAWC,KAA9B;AACD;;;qCAEgB;AACf,WAAK5B,QAAL,CAAc;AACZkB,QAAAA,WAAW,EAAE,CAAC,KAAK3B,KAAL,CAAW2B;AADb,OAAd;AAGD;;;6BAEQ;AAAA,wBAC0E,KAAK3B,KAD/E;AAAA,UACAH,IADA,eACAA,IADA;AAAA,UACMgB,WADN,eACMA,WADN;AAAA,UACmBH,eADnB,eACmBA,eADnB;AAAA,UACoCiB,WADpC,eACoCA,WADpC;AAAA,UACiDF,qBADjD,eACiDA,qBADjD;AAEP,aACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,SAAS,EAAC,MADZ;AAEE,QAAA,QAAQ,EAAE,KAFZ;AAGE,QAAA,OAAO,EAAEE,WAHX;AAIE,QAAA,OAAO,EAAE,KAAKW,cAAL,CAAoBnC,IAApB,CAAyB,IAAzB,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG,KAAKP,cAAL,EALH,CADF,CAFF,EAWE;AAAK,QAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKA,cAAL,CAAoBC,IAApB,CADH,CAXF,EAeE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,sCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,4BAAb;AAA0C,sBAAW,MAArD;AACG,QAAA,OAAO,EAAE,KAAKyC,cAAL,CAAoBnC,IAApB,CAAyB,IAAzB,CADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF,EAME,oBAAC,eAAD;AAAiB,QAAA,WAAW,EAAC,gBAA7B;AAA8C,QAAA,YAAY,EAAE,KAA5D;AAAmE,QAAA,IAAI,EAAE,KAAzE;AACiB,QAAA,IAAI,EAAE,KAAKH,KAAL,CAAWH,IADlC;AAEiB,QAAA,QAAQ,EAAE,KAAK0C,iBAAL,CAAuBpC,IAAvB,CAA4B,IAA5B,CAF3B;AAGiB,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAW8B,UAHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF,EAYE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAKE,oBAAC,gBAAD;AAAkB,QAAA,SAAS,EAAC,0BAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGjB,WAAW,CAAC2B,MAAZ,KAAuB,CAAvB,GACC;AAAK,QAAA,SAAS,EAAC,oEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGf,qBADH,CADD,GAIG,oBAAC,WAAD;AAAa,QAAA,WAAW,EAAEZ,WAA1B;AACa,QAAA,YAAY,EAAE,KAAKT,YADhC;AAEa,QAAA,eAAe,EAAE,KAAKjB,eAAL,CAAqBgB,IAArB,CAA0B,IAA1B,CAF9B;AAGa,QAAA,aAAa,EAAE,KAAKe,aAAL,CAAmBf,IAAnB,CAAwB,IAAxB,CAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALN,CALF,CAZF,CAfF,CADF,EAmDE,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAEO,eAAlB;AAAmC,QAAA,OAAO,EAAE;AAC1C,gBAAMpB,SAAS,EAD2B;AAE1C,kBAAQ,EAFkC;AAG1C,mBAAS,EAHiC;AAI1C,mBAAS,EAJiC;AAK1C,mBAAS,EALiC;AAM1C,yBAAe,EAN2B;AAO1C,qBAAW,KAP+B;AAQ1C,wBAAc;AAR4B,SAA5C;AASG,QAAA,aAAa,EAAE,KAAK4B,aATvB;AAUY,QAAA,cAAc,EAAE,KAAKP,cAVjC;AAUiD,QAAA,eAAe,EAAE,KAAKxB,eAVvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnDF,EA8DE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA9DF,CADF;AAkED;;;;EA3OwBZ,S;;AA8O3B,IAAMkE,eAAe,GAAG,SAAlBA,eAAkB,OAAe;AAAA,MAAbnC,OAAa,QAAbA,OAAa;AAAA,MAC9BO,WAD8B,GACEP,OADF,CAC9BO,WAD8B;AAAA,MACjBkB,eADiB,GACEzB,OADF,CACjByB,eADiB;AAErC,SAAO;AAAClB,IAAAA,WAAW,EAAXA,WAAD;AAAckB,IAAAA,eAAe,EAAfA;AAAd,GAAP;AACD,CAHD;;AAIA,eAAe/C,OAAO,CAACyD,eAAD,EAAkB;AACtCrD,EAAAA,eAAe,EAAfA,eADsC;AAEtCF,EAAAA,YAAY,EAAZA,YAFsC;AAGtCG,EAAAA,eAAe,EAAfA,eAHsC;AAItCF,EAAAA,eAAe,EAAfA;AAJsC,CAAlB,CAAP,CAKZQ,YALY,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Drawer} from \"antd\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\n\nimport ContactList from \"./ContactList\";\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\nimport InfoView from \"components/InfoView/index\";\nimport AddContact from \"./AddContact\";\nimport IntlMessages from \"util/IntlMessages\";\nimport {connect} from \"react-redux\";\nimport _ from \"lodash\";\nimport {onAddContact, onDeleteContact, onGetAllContact, onUpdateContact} from \"../../../appRedux/actions/Contact\";\n\nlet contactId = 723812738;\n\nconst filterOptions = [\n  {\n    id: 1,\n    name: 'All contacts',\n    icon: 'all-contacts'\n  }, {\n    id: 2,\n    name: 'Frequently contacted',\n    icon: 'frequent'\n\n  }, {\n\n    id: 3,\n    name: 'Starred contacts',\n    icon: 'star'\n  }\n];\n\nclass FirebaseCRUD extends Component {\n\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: [],\n      contactList: [],\n      selectedContact: null,\n      addContactState: false,\n    }\n  }\n\n  componentWillMount() {\n    this.props.onGetAllContact();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    console.log(\"contactList\", nextProps.contactList)\n    if (nextProps.contactList) {\n      this.setState({\n        allContact: nextProps.contactList,\n        contactList: nextProps.contactList,\n      })\n    }\n  }\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <i className=\"icon icon-contacts gx-mr-4\"/>\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New Contact</span>\n            </Button>\n          </div>\n          <div className=\"gx-module-side-nav\">\n            <ul className=\"gx-module-nav\">\n              {filterOptions.map(option => <li key={option.id} className=\"gx-nav-item\">\n                  <span\n                    className={`gx-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\n                    this.onFilterOptionSelect.bind(this, option)\n                  }>\n                    <i className={`icon icon-${option.icon}`}/>\n                    <span>{option.name}</span>\n                  </span>\n                </li>\n              )}\n\n            </ul>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  addFavourite = (id, data) => {\n    let contact = data;\n    contact.starred = !data.starred;\n    this.props.onUpdateContact(id, contact);\n  };\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onFilterOptionSelect = (option) => {\n    switch (option.name) {\n      case 'All contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact\n        });\n        break;\n      }\n      case 'Frequently contacted': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: _.filter(this.state.allContact, (contact, key) => contact.frequently)\n        });\n        break;\n      }\n      case 'Starred contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: _.filter(this.state.allContact, (contact) => contact.starred)\n        });\n        break;\n      }\n      default:\n        break;\n    }\n\n  };\n  onSaveContact = (id, data) => {\n    if (id) {\n      this.props.onUpdateContact(id, data);\n    } else {\n      this.props.onAddContact(data);\n    }\n  };\n  onDeleteContact = (data) => {\n    this.props.onDeleteContact(data);\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = _.filter(this.state.allContact, (contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, drawerState, noContentFoundMessage} = this.state;\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div>\n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <div className=\"gx-module-box-topbar\">\n\n              </div>\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n                {contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 addFavourite={this.addFavourite}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n        <InfoView/>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({contact}) => {\n  const {contactList, selectedContact} = contact;\n  return {contactList, selectedContact}\n};\nexport default connect(mapStateToProps, {\n  onGetAllContact,\n  onAddContact,\n  onUpdateContact,\n  onDeleteContact\n})(FirebaseCRUD);\n"]},"metadata":{},"sourceType":"module"}