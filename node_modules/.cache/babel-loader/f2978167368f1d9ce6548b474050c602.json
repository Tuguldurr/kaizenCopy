{"ast":null,"code":"import _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/dataEntry/Form/DynamicRules.js\";\nimport React, { Component } from \"react\";\nimport { Button, Card, Checkbox, Form, Input } from \"antd\";\nvar FormItem = Form.Item;\nvar formItemLayout = {\n  labelCol: {\n    xs: 24,\n    sm: 6\n  },\n  wrapperCol: {\n    xs: 24,\n    sm: 14\n  }\n};\nvar formTailLayout = {\n  labelCol: {\n    xs: 24,\n    sm: 6\n  },\n  wrapperCol: {\n    xs: 24,\n    sm: {\n      span: 14,\n      offset: 6\n    }\n  }\n};\n\nvar DynamicRules =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DynamicRules, _Component);\n\n  function DynamicRules() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DynamicRules);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DynamicRules)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      checkNick: false\n    };\n\n    _this.check = function () {\n      _this.props.form.validateFields(function (err) {\n        if (!err) {\n          console.info('success');\n        }\n      });\n    };\n\n    _this.handleChange = function (e) {\n      _this.setState({\n        checkNick: e.target.checked\n      }, function () {\n        _this.props.form.validateFields(['nickname'], {\n          force: true\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DynamicRules, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(Card, {\n        className: \"gx-card\",\n        title: \"Dynamic Rules\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), getFieldDecorator('username', {\n        rules: [{\n          required: true,\n          message: 'Please input your name'\n        }]\n      })(React.createElement(Input, {\n        placeholder: \"Please input your name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formItemLayout, {\n        label: \"Nickname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), getFieldDecorator('nickname-1', {\n        rules: [{\n          required: this.state.checkNick,\n          message: 'Please input your nickname'\n        }]\n      })(React.createElement(Input, {\n        placeholder: \"Please input your nickname\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }))), React.createElement(FormItem, Object.assign({}, formTailLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Checkbox, {\n        value: this.state.checkNick,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Nickname is required\")), React.createElement(FormItem, Object.assign({}, formTailLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: this.check,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Check\"))));\n    }\n  }]);\n\n  return DynamicRules;\n}(Component);\n\nvar WrappedDynamicRule = Form.create()(DynamicRules);\nexport default WrappedDynamicRule;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/dataEntry/Form/DynamicRules.js"],"names":["React","Component","Button","Card","Checkbox","Form","Input","FormItem","Item","formItemLayout","labelCol","xs","sm","wrapperCol","formTailLayout","span","offset","DynamicRules","state","checkNick","check","props","form","validateFields","err","console","info","handleChange","e","setState","target","checked","force","getFieldDecorator","rules","required","message","WrappedDynamicRule","create"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Card, Checkbox, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nconst formItemLayout = {\n  labelCol: {xs: 24, sm: 6},\n  wrapperCol: {xs: 24, sm: 14},\n};\nconst formTailLayout = {\n  labelCol: {xs: 24, sm: 6},\n  wrapperCol: {xs: 24, sm: {span: 14, offset: 6}},\n};\n\nclass DynamicRules extends Component {\n  state = {\n    checkNick: false,\n  };\n  check = () => {\n    this.props.form.validateFields(\n      (err) => {\n        if (!err) {\n          console.info('success');\n        }\n      },\n    );\n  };\n  handleChange = (e) => {\n    this.setState({\n      checkNick: e.target.checked,\n    }, () => {\n      this.props.form.validateFields(['nickname'], {force: true});\n    });\n  };\n\n  render() {\n    const {getFieldDecorator} = this.props.form;\n    return (\n      <Card className=\"gx-card\" title=\"Dynamic Rules\">\n        <Form>\n          <FormItem {...formItemLayout} label=\"Name\">\n            {getFieldDecorator('username', {\n              rules: [{\n                required: true,\n                message: 'Please input your name',\n              }],\n            })(\n              <Input placeholder=\"Please input your name\"/>\n            )}\n          </FormItem>\n          <FormItem {...formItemLayout} label=\"Nickname\">\n            {getFieldDecorator('nickname-1', {\n              rules: [{\n                required: this.state.checkNick,\n                message: 'Please input your nickname',\n              }],\n            })(\n              <Input placeholder=\"Please input your nickname\"/>\n            )}\n          </FormItem>\n          <FormItem {...formTailLayout}>\n            <Checkbox\n              value={this.state.checkNick}\n              onChange={this.handleChange}\n            >\n              Nickname is required\n            </Checkbox>\n          </FormItem>\n          <FormItem {...formTailLayout}>\n            <Button type=\"primary\" onClick={this.check}>\n              Check\n            </Button>\n          </FormItem>\n        </Form>\n      </Card>\n    );\n  }\n}\n\nconst WrappedDynamicRule = Form.create()(DynamicRules);\n\nexport default (WrappedDynamicRule);\n\n"]},"metadata":{},"sourceType":"module"}