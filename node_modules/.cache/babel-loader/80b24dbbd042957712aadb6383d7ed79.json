{"ast":null,"code":"import _objectSpread from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/inBuiltApps/Mail/index.js\";\nimport React, { PureComponent } from \"react\";\nimport { Button, Checkbox, Drawer, Dropdown, Menu, message } from \"antd\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport mails from \"./data/mails\";\nimport folders from \"./data/folders\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport MailList from \"components/mail/MailList\";\nimport ComposeMail from \"components/mail/Compose/index\";\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\nimport MailDetail from \"components/mail/MailDetail/index\";\nimport IntlMessages from \"util/IntlMessages\";\nimport CircularProgress from \"../../../components/CircularProgress/index\";\nimport Auxiliary from \"../../../util/Auxiliary\";\n\nvar Mail =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Mail, _PureComponent);\n\n  function Mail() {\n    var _this;\n\n    _classCallCheck(this, Mail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mail).call(this));\n\n    _this.MailSideBar = function () {\n      return React.createElement(\"div\", {\n        className: \"gx-module-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-side-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-chat gx-mr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(IntlMessages, {\n        id: \"sidebar.mail.mailbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"gx-module-side-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(CustomScrollbars, {\n        className: \"gx-module-side-scroll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-add-task\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        className: \"gx-btn-block\",\n        onClick: function onClick() {\n          _this.setState({\n            composeMail: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-edit gx-mr-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(IntlMessages, {\n        id: \"sidebar.mail.compose\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }))), React.createElement(\"ul\", {\n        className: \"gx-module-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, _this.getNavFolders(), React.createElement(\"li\", {\n        className: \"gx-module-nav-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"sidebar.mail.filters\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      })), _this.getNavFilters(), React.createElement(\"li\", {\n        className: \"gx-module-nav-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"sidebar.mail.labels\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), _this.getNavLabels()))));\n    };\n\n    _this.onDeleteMail = function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.selected && mail.folder === _this.state.selectedFolder ? _objectSpread({}, mail, {\n          folder: 4,\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        alertMessage: 'Mail Deleted Successfully',\n        showMessage: true,\n        selectedMails: 0,\n        allMail: mails,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    };\n\n    _this.getNavFolders = function () {\n      return folders.map(function (folder, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              return mail.folder === folder.id;\n            });\n\n            _this.setState({\n              selectedFolder: folder.id,\n              noContentFoundMessage: 'No Mail found in selected folder',\n              currentMail: null,\n              loader: true,\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"\".concat(_this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"icon icon-\".concat(folder.icon),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, folder.title)));\n      });\n    };\n\n    _this.onFolderMenuItemSelect = function (e) {\n      var id = +e.key;\n\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.selected && mail.folder === _this.state.selectedFolder ? _objectSpread({}, mail, {\n          folder: id,\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        noContentFoundMessage: 'No Mail found in selected folder',\n        alertMessage: 'Mail has been moved successfully',\n        showMessage: true,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    };\n\n    _this.onLabelMenuItemSelect = function (e) {\n      var id = +e.key;\n\n      var mails = _this.state.allMail.map(function (mail) {\n        if (mail.selected && mail.folder === _this.state.selectedFolder) {\n          if (mail.labels.includes(id)) {\n            return _objectSpread({}, mail, {\n              labels: _this.removeLabel(mail, id)\n            });\n          } else {\n            return _objectSpread({}, mail, {\n              labels: _this.addLabel(mail, id)\n            });\n          }\n        } else {\n          return mail;\n        }\n      });\n\n      _this.setState({\n        noContentFoundMessage: 'No Mail found in selected label',\n        alertMessage: 'Label Updated Successfully',\n        showMessage: true,\n        allMail: mails,\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    };\n\n    _this.handleRequestClose = function () {\n      _this.setState({\n        composeMail: false,\n        showMessage: false\n      });\n    };\n\n    _this.getNavFilters = function () {\n      return filters.map(function (filter, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              if (filter.id === 0 && mail.starred && mail.folder === _this.state.selectedFolder) {\n                return mail;\n              } else if (filter.id === 1 && mail.important && mail.folder === _this.state.selectedFolder) {\n                return mail;\n              }\n\n              return null;\n            });\n\n            _this.setState({\n              noContentFoundMessage: 'No Mail found in selected filter',\n              loader: true,\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"gx-link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"icon icon-\".concat(filter.icon),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, filter.title)));\n      });\n    };\n\n    _this.onOptionMenuItemSelect = function (e) {\n      switch (e.key) {\n        case 'All':\n          _this.handleRequestClose();\n\n          _this.getAllMail();\n\n          break;\n\n        case 'None':\n          _this.handleRequestClose();\n\n          _this.getUnselectedAllMail();\n\n          break;\n\n        case 'Read':\n          _this.handleRequestClose();\n\n          _this.getReadMail();\n\n          break;\n\n        case 'Unread':\n          _this.handleRequestClose();\n\n          _this.getUnreadMail();\n\n          break;\n\n        case 'Starred':\n          _this.handleRequestClose();\n\n          _this.getStarredMail();\n\n          break;\n\n        case 'Unstarred':\n          _this.handleRequestClose();\n\n          _this.getUnStarredMail();\n\n          break;\n\n        case 'Important':\n          _this.handleRequestClose();\n\n          _this.getImportantMail();\n\n          break;\n\n        case 'Unimportant':\n          _this.handleRequestClose();\n\n          _this.getUnimportantMail();\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.getAllMail = function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.folder === _this.state.selectedFolder ? _objectSpread({}, mail, {\n          selected: true\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: mails.length,\n        allMail: mails,\n        optionName: 'All',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    };\n\n    _this.getUnselectedAllMail = function () {\n      var mails = _this.state.allMail.map(function (mail) {\n        return mail.folder === _this.state.selectedFolder ? _objectSpread({}, mail, {\n          selected: false\n        }) : mail;\n      });\n\n      _this.setState({\n        selectedMails: 0,\n        allMail: mails,\n        optionName: 'None',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n    };\n\n    _this.getReadMail = function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.read) {\n          selectedMail++;\n          return _objectSpread({}, mail, {\n            selected: true\n          });\n        }\n\n        return _objectSpread({}, mail, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Read',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    };\n\n    _this.getUnreadMail = function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.read) {\n          selectedMail++;\n          return _objectSpread({}, mail, {\n            selected: true\n          });\n        }\n\n        return _objectSpread({}, mail, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unread',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    };\n\n    _this.getStarredMail = function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.starred) {\n          selectedMail++;\n          return _objectSpread({}, mail, {\n            selected: true\n          });\n        }\n\n        return _objectSpread({}, mail, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Starred',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    };\n\n    _this.getUnStarredMail = function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.starred) {\n          selectedMail++;\n          return _objectSpread({}, mail, {\n            selected: true\n          });\n        }\n\n        return _objectSpread({}, mail, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'UnStarred',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    };\n\n    _this.getImportantMail = function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (mail.important) {\n          selectedMail++;\n          return _objectSpread({}, mail, {\n            selected: true\n          });\n        }\n\n        return _objectSpread({}, mail, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Important',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    };\n\n    _this.getUnimportantMail = function () {\n      var selectedMail = 0;\n\n      var mails = _this.state.allMail.filter(function (mail) {\n        return mail.folder === _this.state.selectedFolder && mail.folder === _this.state.selectedFolder;\n      });\n\n      mails = mails.map(function (mail) {\n        if (!mail.important) {\n          selectedMail++;\n          return _objectSpread({}, mail, {\n            selected: true\n          });\n        }\n\n        return _objectSpread({}, mail, {\n          selected: false\n        });\n      });\n\n      _this.setState({\n        selectedMails: selectedMail,\n        optionName: 'Unimportant',\n        noContentFoundMessage: 'No Mail found in selected Label',\n        folderMails: mails.filter(function (mail) {\n          return mail.folder === _this.state.selectedFolder;\n        })\n      });\n\n      return mails;\n    };\n\n    _this.getNavLabels = function () {\n      return labels.map(function (label, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            var filterMails = _this.state.allMail.filter(function (mail) {\n              return mail.labels.includes(label.id) && mail.folder === _this.state.selectedFolder;\n            });\n\n            _this.setState({\n              loader: true,\n              noContentFoundMessage: 'No Mail found in selected label',\n              folderMails: filterMails\n            });\n\n            setTimeout(function () {\n              _this.setState({\n                loader: false\n              });\n            }, 1500);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"gx-link\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"icon icon-tag gx-text-\".concat(label.color),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357\n          },\n          __self: this\n        }, label.title)));\n      });\n    };\n\n    _this.searchMail = function (searchText) {\n      if (searchText === '') {\n        _this.setState({\n          folderMails: _this.state.allMail.filter(function (mail) {\n            return !mail.deleted;\n          })\n        });\n      } else {\n        var searchMails = _this.state.allMail.filter(function (mail) {\n          return !mail.deleted && mail.subject.toLowerCase().indexOf(searchText.toLowerCase()) > -1;\n        });\n\n        _this.setState({\n          folderMails: searchMails\n        });\n      }\n    };\n\n    _this.displayMail = function (currentMail, folderMails, noContentFoundMessage) {\n      return React.createElement(\"div\", {\n        className: \"gx-module-box-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, currentMail === null ? folderMails.length === 0 ? React.createElement(\"div\", {\n        className: \"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, noContentFoundMessage) : React.createElement(MailList, {\n        mails: folderMails,\n        onStartSelect: _this.onStartSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        onMailSelect: _this.onMailSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        onMailChecked: _this.onMailChecked.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }) : React.createElement(MailDetail, {\n        mail: currentMail,\n        onStartSelect: _this.onStartSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        onImportantSelect: _this.onImportantSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }));\n    };\n\n    _this.getMailActions = function () {\n      return React.createElement(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(Dropdown, {\n        overlay: _this.folderMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-folder gx-icon-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      })), React.createElement(Dropdown, {\n        overlay: _this.labelMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-tag gx-icon-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        onClick: _this.onDeleteMail.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-trash gx-icon-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      })));\n    };\n\n    _this.optionMenu = function () {\n      return React.createElement(Menu, {\n        id: \"option-menu\",\n        onClick: _this.onOptionMenuItemSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, options.map(function (option) {\n        return React.createElement(Menu.Item, {\n          key: option.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 410\n          },\n          __self: this\n        }, option.title);\n      }));\n    };\n\n    _this.folderMenu = function () {\n      return React.createElement(Menu, {\n        id: \"folder-menu\",\n        onClick: _this.onFolderMenuItemSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, folders.map(function (folder) {\n        return React.createElement(Menu.Item, {\n          key: folder.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 420\n          },\n          __self: this\n        }, folder.title);\n      }));\n    };\n\n    _this.labelMenu = function () {\n      return React.createElement(Menu, {\n        id: \"label-menu\",\n        onClick: _this.onLabelMenuItemSelect.bind(_assertThisInitialized(_assertThisInitialized(_this))),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427\n        },\n        __self: this\n      }, labels.map(function (label) {\n        return React.createElement(Menu.Item, {\n          key: label.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430\n          },\n          __self: this\n        }, label.title);\n      }));\n    };\n\n    _this.state = {\n      searchMail: '',\n      noContentFoundMessage: 'No Mail found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allMail: mails,\n      loader: true,\n      currentMail: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      selectedMails: 0,\n      selectedFolder: 0,\n      composeMail: false,\n      folderMails: mails.filter(function (mail) {\n        return mail.folder === 0;\n      })\n    };\n    return _this;\n  }\n\n  _createClass(Mail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.setState({\n          loader: false\n        });\n      }, 1500);\n    }\n  }, {\n    key: \"onMailChecked\",\n    value: function onMailChecked(data) {\n      data.selected = !data.selected;\n      var selectedMail = 0;\n      var mails = this.state.folderMails.map(function (mail) {\n        if (mail.selected) {\n          selectedMail++;\n        }\n\n        if (mail.id === data.id) {\n          if (mail.selected) {\n            selectedMail++;\n          }\n\n          return data;\n        } else {\n          return mail;\n        }\n      });\n      this.setState({\n        selectedMails: selectedMail,\n        folderMails: mails\n      });\n    }\n  }, {\n    key: \"onAllMailSelect\",\n    value: function onAllMailSelect() {\n      var selectAll = this.state.selectedMails <= this.state.folderMails.length;\n\n      if (selectAll) {\n        this.getAllMail();\n      } else {\n        this.getUnselectedAllMail();\n      }\n    }\n  }, {\n    key: \"removeLabel\",\n    value: function removeLabel(mail, label) {\n      mail.labels.splice(mail.labels.indexOf(label), 1);\n\n      if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n        this.setState({\n          currentMail: _objectSpread({}, mail, {\n            labels: mail.labels\n          })\n        });\n      }\n\n      return mail.labels;\n    }\n  }, {\n    key: \"onStartSelect\",\n    value: function onStartSelect(data) {\n      data.starred = !data.starred;\n      this.setState({\n        alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n        showMessage: true,\n        folderMails: this.state.folderMails.map(function (mail) {\n          return mail.id === data.id ? data : mail;\n        })\n      });\n    }\n  }, {\n    key: \"onImportantSelect\",\n    value: function onImportantSelect(data) {\n      data.important = !data.important;\n      this.setState({\n        alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n        showMessage: true,\n        folderMails: this.state.folderMails.map(function (mail) {\n          return mail.id === data.id ? data : mail;\n        })\n      });\n    }\n  }, {\n    key: \"onMailSend\",\n    value: function onMailSend(data) {\n      this.setState({\n        alertMessage: 'Mail Sent Successfully',\n        showMessage: true,\n        folderMails: this.state.allMail.concat(data),\n        allMail: this.state.allMail.concat(data)\n      });\n    }\n  }, {\n    key: \"onMailSelect\",\n    value: function onMailSelect(mail) {\n      var _this3 = this;\n\n      this.setState({\n        loader: true,\n        currentMail: mail\n      });\n      setTimeout(function () {\n        _this3.setState({\n          loader: false\n        });\n      }, 1500);\n    }\n  }, {\n    key: \"addLabel\",\n    value: function addLabel(mail, label) {\n      if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n        this.setState({\n          currentMail: _objectSpread({}, mail, {\n            labels: mail.labels.concat(label)\n          })\n        });\n      }\n\n      return mail.labels.concat(label);\n    }\n  }, {\n    key: \"updateSearch\",\n    value: function updateSearch(evt) {\n      this.setState({\n        searchMail: evt.target.value\n      });\n      this.searchMail(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          selectedMails = _this$state.selectedMails,\n          loader = _this$state.loader,\n          currentMail = _this$state.currentMail,\n          drawerState = _this$state.drawerState,\n          folderMails = _this$state.folderMails,\n          composeMail = _this$state.composeMail,\n          user = _this$state.user,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      return React.createElement(\"div\", {\n        className: \"gx-main-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-app-module\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586\n        },\n        __self: this\n      }, React.createElement(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587\n        },\n        __self: this\n      }, this.MailSideBar())), React.createElement(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      }, this.MailSideBar()), React.createElement(\"div\", {\n        className: \"gx-module-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-box-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603\n        },\n        __self: this\n      })), React.createElement(AppModuleHeader, {\n        placeholder: \"Search mails\",\n        user: this.state.user,\n        onChange: this.updateSearch.bind(this),\n        value: this.state.searchMail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"gx-module-box-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-box-topbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613\n        },\n        __self: this\n      }, this.state.currentMail === null ? React.createElement(\"div\", {\n        className: \"gx-flex-row gx-align-items-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615\n        },\n        __self: this\n      }, this.state.folderMails.length > 0 ? React.createElement(Auxiliary, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        color: \"primary\",\n        className: \"gx-icon-btn\",\n        indeterminate: selectedMails > 0 && selectedMails < folderMails.length,\n        checked: selectedMails > 0,\n        onChange: this.onAllMailSelect.bind(this),\n        value: \"SelectMail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618\n        },\n        __self: this\n      }), React.createElement(Dropdown, {\n        overlay: this.optionMenu(),\n        placement: \"bottomRight\",\n        trigger: ['click'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"gx-px-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626\n        },\n        __self: this\n      }, \" \", this.state.optionName), React.createElement(\"i\", {\n        className: \"icon icon-charvlet-down\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627\n        },\n        __self: this\n      })))) : null) : React.createElement(\"i\", {\n        className: \"icon icon-arrow-left gx-icon-btn\",\n        onClick: function onClick() {\n          _this4.setState({\n            currentMail: null\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        classID: \"toolbar-separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638\n        },\n        __self: this\n      }), selectedMails > 0 && this.getMailActions()), loader ? React.createElement(\"div\", {\n        className: \"gx-loader-view\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646\n        },\n        __self: this\n      })) : this.displayMail(currentMail, folderMails, noContentFoundMessage), React.createElement(ComposeMail, {\n        open: composeMail,\n        user: user,\n        onClose: this.handleRequestClose.bind(this),\n        onMailSend: this.onMailSend.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650\n        },\n        __self: this\n      })))), showMessage && message.info(React.createElement(\"span\", {\n        id: \"message-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657\n        },\n        __self: this\n      }, alertMessage), 3, this.handleRequestClose));\n    }\n  }]);\n\n  return Mail;\n}(PureComponent);\n\nexport default Mail;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/inBuiltApps/Mail/index.js"],"names":["React","PureComponent","Button","Checkbox","Drawer","Dropdown","Menu","message","CustomScrollbars","mails","folders","filters","labels","options","MailList","ComposeMail","AppModuleHeader","MailDetail","IntlMessages","CircularProgress","Auxiliary","Mail","MailSideBar","setState","composeMail","getNavFolders","getNavFilters","getNavLabels","onDeleteMail","state","allMail","map","mail","selected","folder","selectedFolder","alertMessage","showMessage","selectedMails","folderMails","filter","index","filterMails","id","noContentFoundMessage","currentMail","loader","setTimeout","icon","title","onFolderMenuItemSelect","e","key","onLabelMenuItemSelect","includes","removeLabel","addLabel","handleRequestClose","starred","important","onOptionMenuItemSelect","getAllMail","getUnselectedAllMail","getReadMail","getUnreadMail","getStarredMail","getUnStarredMail","getImportantMail","getUnimportantMail","length","optionName","selectedMail","read","label","color","searchMail","searchText","deleted","searchMails","subject","toLowerCase","indexOf","displayMail","onStartSelect","bind","onMailSelect","onMailChecked","onImportantSelect","getMailActions","folderMenu","labelMenu","optionMenu","option","drawerState","anchorEl","user","name","email","avatar","data","selectAll","splice","concat","evt","target","value","onToggleDrawer","updateSearch","onAllMailSelect","onMailSend","info"],"mappings":"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","sourcesContent":["import React, {PureComponent} from \"react\";\nimport {Button, Checkbox, Drawer, Dropdown, Menu, message} from \"antd\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\n\nimport mails from \"./data/mails\";\nimport folders from \"./data/folders\";\nimport filters from \"./data/filters\";\nimport labels from \"./data/labels\";\nimport options from \"./data/options\";\nimport MailList from \"components/mail/MailList\";\nimport ComposeMail from \"components/mail/Compose/index\";\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\nimport MailDetail from \"components/mail/MailDetail/index\";\nimport IntlMessages from \"util/IntlMessages\";\nimport CircularProgress from \"../../../components/CircularProgress/index\";\nimport Auxiliary from \"../../../util/Auxiliary\";\n\n\nclass Mail extends PureComponent {\n\n  MailSideBar = () => {\n    return <div className=\"gx-module-side\">\n\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <i className=\"icon icon-chat gx-mr-4\"/>\n          <IntlMessages id=\"sidebar.mail.mailbox\"/>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button type=\"primary\" className=\"gx-btn-block\"\n                    onClick={() => {\n                      this.setState({composeMail: true})\n                    }}>\n              <i className=\"icon icon-edit gx-mr-2\"/>\n              <IntlMessages id=\"sidebar.mail.compose\"/></Button>\n          </div>\n\n          <ul className=\"gx-module-nav\">\n            {this.getNavFolders()}\n\n            <li className=\"gx-module-nav-label\">\n              <IntlMessages id=\"sidebar.mail.filters\"/>\n            </li>\n\n            {this.getNavFilters()}\n\n            <li className=\"gx-module-nav-label\">\n              <IntlMessages id=\"sidebar.mail.labels\"/>\n            </li>\n\n            {this.getNavLabels()}\n\n          </ul>\n        </CustomScrollbars>\n      </div>\n    </div>\n  };\n\n  onDeleteMail = () => {\n    const mails = this.state.allMail.map(mail =>\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\n        {...mail, folder: 4, selected: false,} : mail\n    );\n    this.setState({\n      alertMessage: 'Mail Deleted Successfully',\n      showMessage: true,\n      selectedMails: 0,\n      allMail: mails,\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n  };\n\n  getNavFolders = () => {\n    return folders.map((folder, index) =>\n      <li key={index} onClick={() => {\n        const filterMails = this.state.allMail.filter(mail => mail.folder === folder.id);\n        this.setState({\n          selectedFolder: folder.id,\n          noContentFoundMessage: 'No Mail found in selected folder',\n          currentMail: null,\n          loader: true,\n          folderMails: filterMails\n        });\n        setTimeout(() => {\n          this.setState({loader: false});\n        }, 1500);\n      }\n      }>\n        <span className={`${this.state.selectedFolder === folder.id ? 'active gx-link' : 'gx-link'}`}>\n          <i className={`icon icon-${folder.icon}`}/>\n          <span>{folder.title}</span>\n        </span>\n      </li>\n    )\n  };\n\n\n  onFolderMenuItemSelect = (e) => {\n    const id = +e.key;\n    const mails = this.state.allMail.map(mail =>\n      mail.selected && (mail.folder === this.state.selectedFolder) ?\n        {...mail, folder: id, selected: false,} : mail\n    );\n    this.setState({\n      selectedMails: 0,\n      allMail: mails,\n      noContentFoundMessage: 'No Mail found in selected folder',\n      alertMessage: 'Mail has been moved successfully',\n      showMessage: true,\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n  };\n\n  onLabelMenuItemSelect = (e) => {\n    const id = +e.key;\n    const mails = this.state.allMail.map(mail => {\n        if (mail.selected && (mail.folder === this.state.selectedFolder)) {\n          if (mail.labels.includes(id)) {\n            return {...mail, labels: this.removeLabel(mail, id)};\n          } else {\n            return {...mail, labels: this.addLabel(mail, id)};\n          }\n        } else {\n          return mail;\n        }\n      }\n    );\n    this.setState({\n      noContentFoundMessage: 'No Mail found in selected label',\n      alertMessage: 'Label Updated Successfully',\n      showMessage: true,\n      allMail: mails,\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n  };\n\n  handleRequestClose = () => {\n    this.setState({\n      composeMail: false,\n      showMessage: false,\n    });\n  };\n  getNavFilters = () => {\n    return filters.map((filter, index) =>\n      <li key={index} onClick={() => {\n        const filterMails = this.state.allMail.filter(mail => {\n          if (filter.id === 0 && mail.starred && mail.folder === this.state.selectedFolder) {\n            return mail\n          } else if (filter.id === 1 && mail.important && mail.folder === this.state.selectedFolder) {\n            return mail\n          }\n          return null;\n        });\n        this.setState({\n          noContentFoundMessage: 'No Mail found in selected filter',\n          loader: true,\n          folderMails: filterMails\n        });\n        setTimeout(() => {\n          this.setState({loader: false});\n        }, 1500);\n      }\n      }>\n        <span className=\"gx-link\">\n          <i className={`icon icon-${filter.icon}`}/>\n          <span>{filter.title}</span>\n        </span>\n      </li>\n    )\n  };\n  onOptionMenuItemSelect = (e) => {\n    switch (e.key) {\n      case 'All':\n        this.handleRequestClose();\n        this.getAllMail();\n        break;\n      case 'None':\n        this.handleRequestClose();\n        this.getUnselectedAllMail();\n        break;\n      case 'Read':\n        this.handleRequestClose();\n        this.getReadMail();\n        break;\n      case 'Unread':\n        this.handleRequestClose();\n        this.getUnreadMail();\n        break;\n      case 'Starred':\n        this.handleRequestClose();\n        this.getStarredMail();\n        break;\n      case 'Unstarred':\n        this.handleRequestClose();\n        this.getUnStarredMail();\n        break;\n      case 'Important':\n        this.handleRequestClose();\n        this.getImportantMail();\n        break;\n      case 'Unimportant':\n        this.handleRequestClose();\n        this.getUnimportantMail();\n        break;\n      default:\n        break;\n    }\n  };\n\n  getAllMail = () => {\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\n      ...mail,\n      selected: true\n    } : mail);\n    this.setState({\n      selectedMails: mails.length,\n      allMail: mails,\n      optionName: 'All',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n  };\n  getUnselectedAllMail = () => {\n    let mails = this.state.allMail.map((mail) => mail.folder === this.state.selectedFolder ? {\n      ...mail,\n      selected: false\n    } : mail);\n    this.setState({\n      selectedMails: 0,\n      allMail: mails,\n      optionName: 'None',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n  };\n  getReadMail = () => {\n    let selectedMail = 0;\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n    mails = mails.map((mail) => {\n      if (mail.read) {\n        selectedMail++;\n        return {...mail, selected: true};\n      }\n      return {...mail, selected: false}\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      optionName: 'Read',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n    return mails;\n  };\n  getUnreadMail = () => {\n    let selectedMail = 0;\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n    mails = mails.map((mail) => {\n      if (!mail.read) {\n        selectedMail++;\n        return {...mail, selected: true};\n      }\n      return {...mail, selected: false}\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      optionName: 'Unread',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n    return mails;\n  };\n  getStarredMail = () => {\n    let selectedMail = 0;\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder);\n    mails = mails.map((mail) => {\n      if (mail.starred) {\n        selectedMail++;\n        return {...mail, selected: true};\n      }\n      return {...mail, selected: false}\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      optionName: 'Starred',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n    return mails;\n  };\n  getUnStarredMail = () => {\n    let selectedMail = 0;\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n    mails = mails.map((mail) => {\n      if (!mail.starred) {\n        selectedMail++;\n        return {...mail, selected: true};\n      }\n      return {...mail, selected: false}\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      optionName: 'UnStarred',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n    return mails;\n  };\n  getImportantMail = () => {\n    let selectedMail = 0;\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n    mails = mails.map((mail) => {\n      if (mail.important) {\n        selectedMail++;\n        return {...mail, selected: true};\n      }\n      return {...mail, selected: false}\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      optionName: 'Important',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n    return mails;\n  };\n  getUnimportantMail = () => {\n    let selectedMail = 0;\n    let mails = this.state.allMail.filter(mail => mail.folder === this.state.selectedFolder && mail.folder === this.state.selectedFolder);\n    mails = mails.map((mail) => {\n      if (!mail.important) {\n        selectedMail++;\n        return {...mail, selected: true};\n      }\n      return {...mail, selected: false}\n    });\n    this.setState({\n      selectedMails: selectedMail,\n      optionName: 'Unimportant',\n      noContentFoundMessage: 'No Mail found in selected Label',\n      folderMails: mails.filter(mail => mail.folder === this.state.selectedFolder)\n    });\n    return mails;\n  };\n  getNavLabels = () => {\n    return labels.map((label, index) =>\n      <li key={index} onClick={() => {\n        const filterMails = this.state.allMail.filter(mail => mail.labels.includes(label.id) && mail.folder === this.state.selectedFolder);\n        this.setState({\n          loader: true,\n          noContentFoundMessage: 'No Mail found in selected label',\n          folderMails: filterMails\n        });\n        setTimeout(() => {\n          this.setState({loader: false});\n        }, 1500);\n      }\n      }>\n        <span className=\"gx-link\">\n          <i className={`icon icon-tag gx-text-${label.color}`}/>\n          <span>{label.title}</span>\n        </span>\n      </li>\n    )\n  };\n  searchMail = (searchText) => {\n    if (searchText === '') {\n      this.setState({folderMails: this.state.allMail.filter((mail) => !mail.deleted)});\n    } else {\n      const searchMails = this.state.allMail.filter((mail) =>\n        !mail.deleted && mail.subject.toLowerCase().indexOf(searchText.toLowerCase()) > -1);\n      this.setState({\n        folderMails: searchMails\n      });\n    }\n  };\n  displayMail = (currentMail, folderMails, noContentFoundMessage) => {\n    return (<div className=\"gx-module-box-column\">\n      {currentMail === null ?\n        folderMails.length === 0 ?\n          <div className=\"gx-no-content-found gx-text-light gx-d-flex gx-align-items-center gx-justify-content-center\">\n            {noContentFoundMessage}\n          </div>\n          :\n          <MailList mails={folderMails} onStartSelect={this.onStartSelect.bind(this)}\n                    onMailSelect={this.onMailSelect.bind(this)}\n                    onMailChecked={this.onMailChecked.bind(this)}/>\n        :\n        <MailDetail mail={currentMail} onStartSelect={this.onStartSelect.bind(this)}\n                    onImportantSelect={this.onImportantSelect.bind(this)}/>}\n    </div>)\n  };\n  getMailActions = () => {\n    return <div className=\"gx-flex-row gx-align-items-center\">\n\n      <Dropdown overlay={this.folderMenu()} placement=\"bottomRight\" trigger={['click']}>\n        <i className=\"icon icon-folder gx-icon-btn\"/>\n      </Dropdown>\n\n      <Dropdown overlay={this.labelMenu()} placement=\"bottomRight\" trigger={['click']}>\n        <i className=\"icon icon-tag gx-icon-btn\"/>\n      </Dropdown>\n\n      <span onClick={this.onDeleteMail.bind(this)}>\n        <i className=\"icon icon-trash gx-icon-btn\"/></span>\n\n    </div>\n  };\n\n  optionMenu = () => (\n    <Menu id=\"option-menu\"\n          onClick={this.onOptionMenuItemSelect.bind(this)}>\n      {options.map(option =>\n        <Menu.Item key={option.title}>\n          {option.title}\n        </Menu.Item>,\n      )}\n    </Menu>);\n\n  folderMenu = () => (\n    <Menu id=\"folder-menu\"\n          onClick={this.onFolderMenuItemSelect.bind(this)}>\n      {folders.map(folder =>\n        <Menu.Item key={folder.id}>\n          {folder.title}\n        </Menu.Item>,\n      )}\n    </Menu>);\n\n  labelMenu = () => (\n    <Menu id=\"label-menu\"\n          onClick={this.onLabelMenuItemSelect.bind(this)}>\n      {labels.map(label =>\n        <Menu.Item key={label.id}>\n          {label.title}\n        </Menu.Item>,\n      )}\n    </Menu>\n  );\n\n\n  constructor() {\n    super();\n    this.state = {\n      searchMail: '',\n      noContentFoundMessage: 'No Mail found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      drawerState: false,\n      optionName: 'None',\n      anchorEl: null,\n      allMail: mails,\n      loader: true,\n      currentMail: null,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      selectedMails: 0,\n      selectedFolder: 0,\n      composeMail: false,\n      folderMails: mails.filter(mail => mail.folder === 0)\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({loader: false});\n    }, 1500);\n  }\n\n\n  onMailChecked(data) {\n    data.selected = !data.selected;\n    let selectedMail = 0;\n    const mails = this.state.folderMails.map(mail => {\n        if (mail.selected) {\n          selectedMail++;\n        }\n        if (mail.id === data.id) {\n          if (mail.selected) {\n            selectedMail++;\n          }\n          return data;\n        } else {\n          return mail;\n        }\n      }\n    );\n    this.setState({\n      selectedMails: selectedMail,\n      folderMails: mails\n    });\n  }\n\n  onAllMailSelect() {\n    const selectAll = this.state.selectedMails <= this.state.folderMails.length;\n    if (selectAll) {\n      this.getAllMail();\n    } else {\n      this.getUnselectedAllMail();\n    }\n  }\n\n  removeLabel(mail, label) {\n    mail.labels.splice(mail.labels.indexOf(label), 1);\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n      this.setState({\n        currentMail: {...mail, labels: mail.labels}\n      })\n    }\n    return mail.labels;\n  }\n\n  onStartSelect(data) {\n    data.starred = !data.starred;\n    this.setState({\n      alertMessage: data.starred ? 'Mail Mark as Star' : 'Mail Remove as Star',\n      showMessage: true,\n      folderMails: this.state.folderMails.map(mail =>\n        mail.id === data.id ?\n          data : mail\n      )\n    });\n  }\n\n  onImportantSelect(data) {\n    data.important = !data.important;\n    this.setState({\n      alertMessage: data.important ? 'Mail Mark as Important' : 'Mail Remove as Important',\n      showMessage: true,\n      folderMails: this.state.folderMails.map(mail =>\n        mail.id === data.id ?\n          data : mail\n      )\n    });\n  }\n\n  onMailSend(data) {\n    this.setState(\n      {\n        alertMessage: 'Mail Sent Successfully',\n        showMessage: true,\n        folderMails: this.state.allMail.concat(data),\n        allMail: this.state.allMail.concat(data)\n      }\n    );\n  }\n\n  onMailSelect(mail) {\n    this.setState({\n      loader: true,\n      currentMail: mail,\n    });\n    setTimeout(() => {\n      this.setState({loader: false});\n    }, 1500);\n  }\n\n  addLabel(mail, label) {\n    if (this.state.currentMail !== null && mail.id === this.state.currentMail.id) {\n      this.setState({\n        currentMail: {...mail, labels: mail.labels.concat(label)}\n      })\n    }\n    return mail.labels.concat(label)\n  }\n\n  updateSearch(evt) {\n    this.setState({\n      searchMail: evt.target.value,\n    });\n    this.searchMail(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {selectedMails, loader, currentMail, drawerState, folderMails, composeMail, user, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    return (\n\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.MailSideBar()}\n            </Drawer>\n\n          </div>\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.MailSideBar()}\n          </div>\n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n              <AppModuleHeader placeholder=\"Search mails\" user={this.state.user}\n                               onChange={this.updateSearch.bind(this)}\n                               value={this.state.searchMail}/>\n\n            </div>\n\n            <div className=\"gx-module-box-content\">\n              <div className=\"gx-module-box-topbar\">\n                {this.state.currentMail === null ?\n                  <div className=\"gx-flex-row gx-align-items-center\">\n                    {this.state.folderMails.length > 0 ?\n                      <Auxiliary>\n                        <Checkbox color=\"primary\" className=\"gx-icon-btn\"\n                                  indeterminate={selectedMails > 0 && selectedMails < folderMails.length}\n                                  checked={selectedMails > 0}\n                                  onChange={this.onAllMailSelect.bind(this)}\n                                  value=\"SelectMail\"/>\n\n                        <Dropdown overlay={this.optionMenu()} placement=\"bottomRight\" trigger={['click']}>\n                          <div>\n                            <span className=\"gx-px-2\"> {this.state.optionName}</span>\n                            <i className=\"icon icon-charvlet-down\"/></div>\n                        </Dropdown>\n                      </Auxiliary>\n                      : null}\n                  </div>\n                  :\n                  <i className=\"icon icon-arrow-left gx-icon-btn\" onClick={() => {\n                    this.setState({currentMail: null})\n                  }}/>\n                }\n\n                <div classID=\"toolbar-separator\"/>\n\n                {(selectedMails > 0) && this.getMailActions()}\n\n              </div>\n\n              {loader ?\n                <div className=\"gx-loader-view\">\n                  <CircularProgress/>\n                </div>\n                : this.displayMail(currentMail, folderMails, noContentFoundMessage)}\n\n              <ComposeMail open={composeMail} user={user}\n                           onClose={this.handleRequestClose.bind(this)}\n                           onMailSend={this.onMailSend.bind(this)}/>\n\n            </div>\n          </div>\n        </div>\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\n      </div>\n    )\n  }\n}\n\nexport default Mail;\n"]},"metadata":{},"sourceType":"module"}