{"ast":null,"code":"import _objectSpread from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/inBuiltApps/Contact/index.js\";\nimport React, { Component } from \"react\";\nimport { Button, Checkbox, Drawer, message } from \"antd\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\nimport contactList from \"./data/contactList\";\nimport ContactList from \"components/contact/ContactList\";\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\nimport AddContact from \"components/contact/AddContact\";\nimport IntlMessages from \"util/IntlMessages\";\nvar contactId = 723812738;\nvar filterOptions = [{\n  id: 1,\n  name: 'All contacts',\n  icon: 'all-contacts'\n}, {\n  id: 2,\n  name: 'Frequently contacted',\n  icon: 'frequent'\n}, {\n  id: 3,\n  name: 'Starred contacts',\n  icon: 'star'\n}];\n\nvar Contact =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Contact, _Component);\n\n  function Contact() {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Contact).call(this));\n\n    _this.ContactSideBar = function (user) {\n      return React.createElement(\"div\", {\n        className: \"gx-module-side\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-side-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-contacts gx-mr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"chat.contacts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"gx-module-side-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(CustomScrollbars, {\n        className: \"gx-module-side-scroll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-add-task\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"gx-btn-block ant-btn\",\n        type: \"primary\",\n        \"aria-label\": \"add\",\n        onClick: _this.onAddContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-add gx-mr-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Add New Contact\"))), React.createElement(\"div\", {\n        className: \"gx-module-side-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: \"gx-module-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, filterOptions.map(function (option) {\n        return React.createElement(\"li\", {\n          key: option.id,\n          className: \"gx-nav-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"gx-link \".concat(option.id === _this.state.selectedSectionId ? 'active' : ''),\n          onClick: _this.onFilterOptionSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)), option),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"icon icon-\".concat(option.icon),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, option.name)));\n      }))))));\n    };\n\n    _this.addFavourite = function (data) {\n      _this.setState({\n        alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\n        showMessage: true,\n        contactList: _this.state.contactList.map(function (contact) {\n          return contact.id === data.id ? _objectSpread({}, contact, {\n            starred: !data.starred\n          }) : contact;\n        }),\n        allContact: _this.state.allContact.map(function (contact) {\n          return contact.id === data.id ? _objectSpread({}, contact, {\n            starred: !data.starred\n          }) : contact;\n        })\n      });\n    };\n\n    _this.onContactSelect = function (data) {\n      data.selected = !data.selected;\n      var selectedContacts = 0;\n\n      var contactList = _this.state.contactList.map(function (contact) {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      _this.setState({\n        selectedContacts: selectedContacts,\n        contactList: contactList\n      });\n    };\n\n    _this.onAddContact = function () {\n      _this.setState({\n        addContactState: true\n      });\n    };\n\n    _this.onContactClose = function () {\n      _this.setState({\n        addContactState: false\n      });\n    };\n\n    _this.onFilterOptionSelect = function (option) {\n      switch (option.name) {\n        case 'All contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact\n            });\n\n            break;\n          }\n\n        case 'Frequently contacted':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.frequently;\n              })\n            });\n\n            break;\n          }\n\n        case 'Starred contacts':\n          {\n            _this.setState({\n              selectedSectionId: option.id,\n              filterOption: option.name,\n              contactList: _this.state.allContact.filter(function (contact) {\n                return contact.starred;\n              })\n            });\n\n            break;\n          }\n\n        default:\n          break;\n      }\n    };\n\n    _this.onSaveContact = function (data) {\n      var isNew = true;\n\n      var contactList = _this.state.allContact.map(function (contact) {\n        if (contact.id === data.id) {\n          isNew = false;\n          return data;\n        } else {\n          return contact;\n        }\n      });\n\n      if (isNew) {\n        contactList.push(data);\n      }\n\n      _this.setState({\n        alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n        showMessage: true,\n        contactList: contactList,\n        allContact: contactList\n      }); // this.onFilterOptionSelect(this.state.filterOption);\n\n    };\n\n    _this.onDeleteContact = function (data) {\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        }),\n        contactList: _this.state.allContact.filter(function (contact) {\n          return contact.id !== data.id;\n        })\n      });\n    };\n\n    _this.onDeleteSelectedContact = function () {\n      var contacts = _this.state.allContact.filter(function (contact) {\n        return !contact.selected;\n      });\n\n      _this.setState({\n        alertMessage: 'Contact Deleted Successfully',\n        showMessage: true,\n        allContact: contacts,\n        contactList: contacts,\n        selectedContacts: 0\n      });\n    };\n\n    _this.filterContact = function (userName) {\n      var filterOption = _this.state.filterOption;\n\n      if (userName === '') {\n        _this.setState({\n          contactList: _this.state.allContact\n        });\n      } else {\n        var filterContact = _this.state.allContact.filter(function (contact) {\n          return contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1;\n        });\n\n        if (filterOption === 'All contacts') {\n          _this.setState({\n            contactList: filterContact\n          });\n        } else if (filterOption === 'Frequently contacted') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.frequently;\n            })\n          });\n        } else if (filterOption === 'Starred contacts') {\n          _this.setState({\n            contactList: filterContact.filter(function (contact) {\n              return contact.starred;\n            })\n          });\n        }\n      }\n    };\n\n    _this.handleRequestClose = function () {\n      _this.setState({\n        showMessage: false\n      });\n    };\n\n    _this.getAllContact = function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread({}, contact, {\n          selected: true\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: contactList.length,\n        allContact: contactList,\n        contactList: contactList\n      });\n    };\n\n    _this.getUnselectedAllContact = function () {\n      var contactList = _this.state.allContact.map(function (contact) {\n        return contact ? _objectSpread({}, contact, {\n          selected: false\n        }) : contact;\n      });\n\n      _this.setState({\n        selectedContacts: 0,\n        allContact: contactList,\n        contactList: contactList\n      });\n    };\n\n    _this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false\n    };\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"onAllContactSelect\",\n    value: function onAllContactSelect() {\n      var selectAll = this.state.selectedContacts < this.state.contactList.length;\n\n      if (selectAll) {\n        this.getAllContact();\n      } else {\n        this.getUnselectedAllContact();\n      }\n    }\n  }, {\n    key: \"updateContactUser\",\n    value: function updateContactUser(evt) {\n      this.setState({\n        searchUser: evt.target.value\n      });\n      this.filterContact(evt.target.value);\n    }\n  }, {\n    key: \"onToggleDrawer\",\n    value: function onToggleDrawer() {\n      this.setState({\n        drawerState: !this.state.drawerState\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          contactList = _this$state.contactList,\n          addContactState = _this$state.addContactState,\n          drawerState = _this$state.drawerState,\n          selectedContacts = _this$state.selectedContacts,\n          alertMessage = _this$state.alertMessage,\n          showMessage = _this$state.showMessage,\n          noContentFoundMessage = _this$state.noContentFoundMessage;\n      return React.createElement(\"div\", {\n        className: \"gx-main-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-app-module\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-d-block gx-d-lg-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Drawer, {\n        placement: \"left\",\n        closable: false,\n        visible: drawerState,\n        onClose: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, this.ContactSideBar())), React.createElement(\"div\", {\n        className: \"gx-module-sidenav gx-d-none gx-d-lg-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, this.ContactSideBar(user)), React.createElement(\"div\", {\n        className: \"gx-module-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-box-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"gx-drawer-btn gx-d-flex gx-d-lg-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon icon-menu gx-icon-btn\",\n        \"aria-label\": \"Menu\",\n        onClick: this.onToggleDrawer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      })), React.createElement(AppModuleHeader, {\n        placeholder: \"Search contact\",\n        notification: false,\n        apps: false,\n        user: this.state.user,\n        onChange: this.updateContactUser.bind(this),\n        value: this.state.searchUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"gx-module-box-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gx-module-box-topbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        color: \"primary\",\n        className: \"gx-icon-btn\",\n        indeterminate: selectedContacts > 0 && selectedContacts < contactList.length,\n        checked: selectedContacts > 0,\n        onChange: this.onAllContactSelect.bind(this),\n        value: \"SelectMail\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }), selectedContacts > 0 && React.createElement(\"i\", {\n        className: \"gx-icon-btn icon icon-trash\",\n        onClick: this.onDeleteSelectedContact.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      })), React.createElement(CustomScrollbars, {\n        className: \"gx-module-content-scroll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, contactList.length === 0 ? React.createElement(\"div\", {\n        className: \"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, noContentFoundMessage) : React.createElement(ContactList, {\n        contactList: contactList,\n        addFavourite: this.addFavourite.bind(this),\n        onContactSelect: this.onContactSelect.bind(this),\n        onDeleteContact: this.onDeleteContact.bind(this),\n        onSaveContact: this.onSaveContact.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }))))), React.createElement(AddContact, {\n        open: addContactState,\n        contact: {\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false\n        },\n        onSaveContact: this.onSaveContact,\n        onContactClose: this.onContactClose,\n        onDeleteContact: this.onDeleteContact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }), showMessage && message.info(React.createElement(\"span\", {\n        id: \"message-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, alertMessage), 3, this.handleRequestClose));\n    }\n  }]);\n\n  return Contact;\n}(Component);\n\nexport default Contact;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/inBuiltApps/Contact/index.js"],"names":["React","Component","Button","Checkbox","Drawer","message","CustomScrollbars","contactList","ContactList","AppModuleHeader","AddContact","IntlMessages","contactId","filterOptions","id","name","icon","Contact","ContactSideBar","user","onAddContact","map","option","state","selectedSectionId","onFilterOptionSelect","bind","addFavourite","data","setState","alertMessage","starred","showMessage","contact","allContact","onContactSelect","selected","selectedContacts","addContactState","onContactClose","filterOption","filter","frequently","onSaveContact","isNew","push","onDeleteContact","onDeleteSelectedContact","contacts","filterContact","userName","toLowerCase","indexOf","handleRequestClose","getAllContact","length","getUnselectedAllContact","noContentFoundMessage","drawerState","email","avatar","searchUser","selectedContact","selectAll","evt","target","value","onToggleDrawer","updateContactUser","onAllContactSelect","info"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport {Button, Checkbox, Drawer, message} from \"antd\";\nimport CustomScrollbars from \"util/CustomScrollbars\";\n\nimport contactList from \"./data/contactList\";\nimport ContactList from \"components/contact/ContactList\";\nimport AppModuleHeader from \"components/AppModuleHeader/index\";\nimport AddContact from \"components/contact/AddContact\";\nimport IntlMessages from \"util/IntlMessages\";\n\nlet contactId = 723812738;\n\nconst filterOptions = [\n  {\n    id: 1,\n    name: 'All contacts',\n    icon: 'all-contacts'\n  }, {\n    id: 2,\n    name: 'Frequently contacted',\n    icon: 'frequent'\n\n  }, {\n\n    id: 3,\n    name: 'Starred contacts',\n    icon: 'star'\n  }\n];\n\nclass Contact extends Component {\n\n  ContactSideBar = (user) => {\n    return <div className=\"gx-module-side\">\n      <div className=\"gx-module-side-header\">\n        <div className=\"gx-module-logo\">\n          <i className=\"icon icon-contacts gx-mr-4\"/>\n          <span><IntlMessages id=\"chat.contacts\"/></span>\n        </div>\n      </div>\n\n      <div className=\"gx-module-side-content\">\n        <CustomScrollbars className=\"gx-module-side-scroll\">\n          <div className=\"gx-module-add-task\">\n            <Button className=\"gx-btn-block ant-btn\" type=\"primary\" aria-label=\"add\"\n                    onClick={this.onAddContact}>\n              <i className=\"icon icon-add gx-mr-2\"/>\n              <span>Add New Contact</span>\n            </Button>\n          </div>\n          <div className=\"gx-module-side-nav\">\n            <ul className=\"gx-module-nav\">\n              {filterOptions.map(option => <li key={option.id} className=\"gx-nav-item\">\n                  <span\n                    className={`gx-link ${option.id === this.state.selectedSectionId ? 'active' : ''}`} onClick={\n                    this.onFilterOptionSelect.bind(this, option)\n                  }>\n                    <i className={`icon icon-${option.icon}`}/>\n                    <span>{option.name}</span>\n                  </span>\n                </li>\n              )}\n\n            </ul>\n          </div>\n        </CustomScrollbars>\n      </div>\n    </div>\n\n  };\n\n  addFavourite = (data) => {\n    this.setState({\n      alertMessage: data.starred ? 'Contact removed as star' : 'Contact marked as star',\n      showMessage: true,\n      contactList: this.state.contactList.map((contact) => contact.id === data.id ? {\n        ...contact,\n        starred: !data.starred\n      } : contact),\n      allContact: this.state.allContact.map((contact) => contact.id === data.id ? {\n        ...contact,\n        starred: !data.starred\n      } : contact)\n    })\n  };\n  onContactSelect = (data) => {\n    data.selected = !data.selected;\n    let selectedContacts = 0;\n    const contactList = this.state.contactList.map(contact => {\n        if (contact.selected) {\n          selectedContacts++;\n        }\n        if (contact.id === data.id) {\n          if (contact.selected) {\n            selectedContacts++;\n          }\n          return data;\n        } else {\n          return contact;\n        }\n      }\n    );\n    this.setState({\n      selectedContacts: selectedContacts,\n      contactList: contactList\n    });\n\n  };\n\n\n  onAddContact = () => {\n    this.setState({addContactState: true});\n  };\n  onContactClose = () => {\n    this.setState({addContactState: false});\n  };\n  onFilterOptionSelect = (option) => {\n    switch (option.name) {\n      case 'All contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact\n        });\n        break;\n      }\n      case 'Frequently contacted': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact.filter((contact) => contact.frequently)\n        });\n        break;\n      }\n      case 'Starred contacts': {\n        this.setState({\n          selectedSectionId: option.id,\n          filterOption: option.name,\n          contactList: this.state.allContact.filter((contact) => contact.starred)\n        });\n        break;\n      }\n      default:\n        break;\n    }\n\n  };\n  onSaveContact = (data) => {\n    let isNew = true;\n    const contactList = this.state.allContact.map((contact) => {\n      if (contact.id === data.id) {\n        isNew = false;\n        return data\n      } else {\n        return contact\n      }\n    });\n    if (isNew) {\n      contactList.push(data);\n    }\n    this.setState({\n      alertMessage: isNew ? 'Contact Added Successfully' : 'Contact Updated Successfully',\n      showMessage: true,\n      contactList: contactList,\n      allContact: contactList\n    });\n    // this.onFilterOptionSelect(this.state.filterOption);\n  };\n  onDeleteContact = (data) => {\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: this.state.allContact.filter((contact) => contact.id !== data.id),\n      contactList: this.state.allContact.filter((contact) => contact.id !== data.id)\n    })\n  };\n  onDeleteSelectedContact = () => {\n    const contacts = this.state.allContact.filter((contact) => !contact.selected);\n    this.setState({\n      alertMessage: 'Contact Deleted Successfully',\n      showMessage: true,\n      allContact: contacts,\n      contactList: contacts,\n      selectedContacts: 0\n    })\n  };\n  filterContact = (userName) => {\n    const {filterOption} = this.state;\n    if (userName === '') {\n      this.setState({contactList: this.state.allContact});\n    } else {\n      const filterContact = this.state.allContact.filter((contact) =>\n        contact.name.toLowerCase().indexOf(userName.toLowerCase()) > -1);\n      if (filterOption === 'All contacts') {\n        this.setState({contactList: filterContact});\n      } else if (filterOption === 'Frequently contacted') {\n        this.setState({contactList: filterContact.filter((contact) => contact.frequently)});\n\n      } else if (filterOption === 'Starred contacts') {\n        this.setState({contactList: filterContact.filter((contact) => contact.starred)});\n      }\n    }\n  };\n  handleRequestClose = () => {\n    this.setState({\n      showMessage: false,\n    });\n  };\n  getAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: true\n    } : contact);\n    this.setState({\n      selectedContacts: contactList.length,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n  getUnselectedAllContact = () => {\n    let contactList = this.state.allContact.map((contact) => contact ? {\n      ...contact,\n      selected: false\n    } : contact);\n    this.setState({\n      selectedContacts: 0,\n      allContact: contactList,\n      contactList: contactList\n    });\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      noContentFoundMessage: 'No Contact found in selected folder',\n      alertMessage: '',\n      showMessage: false,\n      selectedSectionId: 1,\n      drawerState: false,\n      user: {\n        name: 'Robert Johnson',\n        email: 'robert.johnson@example.com',\n        avatar: 'https://via.placeholder.com/150x150'\n      },\n      searchUser: '',\n      filterOption: 'All contacts',\n      allContact: contactList,\n      contactList: contactList,\n      selectedContact: null,\n      selectedContacts: 0,\n      addContactState: false,\n    }\n  }\n\n  onAllContactSelect() {\n    const selectAll = this.state.selectedContacts < this.state.contactList.length;\n    if (selectAll) {\n      this.getAllContact();\n    } else {\n      this.getUnselectedAllContact();\n    }\n  }\n\n  updateContactUser(evt) {\n    this.setState({\n      searchUser: evt.target.value,\n    });\n    this.filterContact(evt.target.value)\n  }\n\n  onToggleDrawer() {\n    this.setState({\n      drawerState: !this.state.drawerState\n    });\n  }\n\n  render() {\n    const {user, contactList, addContactState, drawerState, selectedContacts, alertMessage, showMessage, noContentFoundMessage} = this.state;\n    return (\n      <div className=\"gx-main-content\">\n        <div className=\"gx-app-module\">\n\n          <div className=\"gx-d-block gx-d-lg-none\">\n            <Drawer\n              placement=\"left\"\n              closable={false}\n              visible={drawerState}\n              onClose={this.onToggleDrawer.bind(this)}>\n              {this.ContactSideBar()}\n            </Drawer>\n          </div>\n          <div className=\"gx-module-sidenav gx-d-none gx-d-lg-flex\">\n            {this.ContactSideBar(user)}\n          </div>\n\n          <div className=\"gx-module-box\">\n            <div className=\"gx-module-box-header\">\n              <span className=\"gx-drawer-btn gx-d-flex gx-d-lg-none\">\n                  <i className=\"icon icon-menu gx-icon-btn\" aria-label=\"Menu\"\n                     onClick={this.onToggleDrawer.bind(this)}/>\n              </span>\n\n              <AppModuleHeader placeholder=\"Search contact\" notification={false} apps={false}\n                               user={this.state.user}\n                               onChange={this.updateContactUser.bind(this)}\n                               value={this.state.searchUser}/>\n            </div>\n            <div className=\"gx-module-box-content\">\n\n              <div className=\"gx-module-box-topbar\">\n                <Checkbox color=\"primary\" className=\"gx-icon-btn\"\n                          indeterminate={selectedContacts > 0 && selectedContacts < contactList.length}\n                          checked={selectedContacts > 0}\n                          onChange={this.onAllContactSelect.bind(this)}\n                          value=\"SelectMail\"/>\n\n\n                {selectedContacts > 0 &&\n                <i className=\"gx-icon-btn icon icon-trash\" onClick={this.onDeleteSelectedContact.bind(this)}/>}\n\n              </div>\n              <CustomScrollbars className=\"gx-module-content-scroll\">\n                {contactList.length === 0 ?\n                  <div className=\"gx-h-100 gx-d-flex gx-align-items-center gx-justify-content-center\">\n                    {noContentFoundMessage}\n                  </div>\n                  : <ContactList contactList={contactList}\n                                 addFavourite={this.addFavourite.bind(this)}\n                                 onContactSelect={this.onContactSelect.bind(this)}\n                                 onDeleteContact={this.onDeleteContact.bind(this)}\n                                 onSaveContact={this.onSaveContact.bind(this)}/>\n                }\n\n\n              </CustomScrollbars>\n\n            </div>\n          </div>\n        </div>\n\n        <AddContact open={addContactState} contact={{\n          'id': contactId++,\n          'name': '',\n          'thumb': '',\n          'email': '',\n          'phone': '',\n          'designation': '',\n          'selected': false,\n          'starred': false,\n          'frequently': false,\n        }} onSaveContact={this.onSaveContact}\n                    onContactClose={this.onContactClose} onDeleteContact={this.onDeleteContact}/>\n\n        {showMessage && message.info(<span id=\"message-id\">{alertMessage}</span>, 3, this.handleRequestClose)}\n      </div>\n    )\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}