{"ast":null,"code":"import _toConsumableArray from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/dataDisplay/Tree/LoadData.js\";\nimport React from \"react\";\nimport { Card, Tree } from \"antd\";\nvar TreeNode = Tree.TreeNode;\n\nvar LoadData =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoadData, _React$Component);\n\n  function LoadData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoadData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoadData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      treeData: [{\n        title: 'Expand to load',\n        key: '0'\n      }, {\n        title: 'Expand to load',\n        key: '1'\n      }, {\n        title: 'Tree Node',\n        key: '2',\n        isLeaf: true\n      }]\n    };\n\n    _this.onLoadData = function (treeNode) {\n      return new Promise(function (resolve) {\n        if (treeNode.props.children) {\n          resolve();\n          return;\n        }\n\n        setTimeout(function () {\n          treeNode.props.dataRef.children = [{\n            title: 'Child Node',\n            key: \"\".concat(treeNode.props.eventKey, \"-0\")\n          }, {\n            title: 'Child Node',\n            key: \"\".concat(treeNode.props.eventKey, \"-1\")\n          }];\n\n          _this.setState({\n            treeData: _toConsumableArray(_this.state.treeData)\n          });\n\n          resolve();\n        }, 1000);\n      });\n    };\n\n    _this.renderTreeNodes = function (data) {\n      return data.map(function (item) {\n        if (item.children) {\n          return React.createElement(TreeNode, {\n            title: item.title,\n            key: item.key,\n            dataRef: item,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36\n            },\n            __self: this\n          }, _this.renderTreeNodes(item.children));\n        }\n\n        return React.createElement(TreeNode, Object.assign({}, item, {\n          dataRef: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LoadData, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Card, {\n        title: \"Load Data\",\n        className: \"gx-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(Tree, {\n        loadData: this.onLoadData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, this.renderTreeNodes(this.state.treeData)));\n    }\n  }]);\n\n  return LoadData;\n}(React.Component);\n\nexport default LoadData;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/dataDisplay/Tree/LoadData.js"],"names":["React","Card","Tree","TreeNode","LoadData","state","treeData","title","key","isLeaf","onLoadData","treeNode","Promise","resolve","props","children","setTimeout","dataRef","eventKey","setState","renderTreeNodes","data","map","item","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,IAAd,QAAyB,MAAzB;AAEA,IAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;;IAEMC,Q;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,CACR;AAACC,QAAAA,KAAK,EAAE,gBAAR;AAA0BC,QAAAA,GAAG,EAAE;AAA/B,OADQ,EAER;AAACD,QAAAA,KAAK,EAAE,gBAAR;AAA0BC,QAAAA,GAAG,EAAE;AAA/B,OAFQ,EAGR;AAACD,QAAAA,KAAK,EAAE,WAAR;AAAqBC,QAAAA,GAAG,EAAE,GAA1B;AAA+BC,QAAAA,MAAM,EAAE;AAAvC,OAHQ;AADJ,K;;UAORC,U,GAAa,UAACC,QAAD,EAAc;AACzB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,YAAIF,QAAQ,CAACG,KAAT,CAAeC,QAAnB,EAA6B;AAC3BF,UAAAA,OAAO;AACP;AACD;;AACDG,QAAAA,UAAU,CAAC,YAAM;AACfL,UAAAA,QAAQ,CAACG,KAAT,CAAeG,OAAf,CAAuBF,QAAvB,GAAkC,CAChC;AAACR,YAAAA,KAAK,EAAE,YAAR;AAAsBC,YAAAA,GAAG,YAAKG,QAAQ,CAACG,KAAT,CAAeI,QAApB;AAAzB,WADgC,EAEhC;AAACX,YAAAA,KAAK,EAAE,YAAR;AAAsBC,YAAAA,GAAG,YAAKG,QAAQ,CAACG,KAAT,CAAeI,QAApB;AAAzB,WAFgC,CAAlC;;AAIA,gBAAKC,QAAL,CAAc;AACZb,YAAAA,QAAQ,qBAAM,MAAKD,KAAL,CAAWC,QAAjB;AADI,WAAd;;AAGAO,UAAAA,OAAO;AACR,SATS,EASP,IATO,CAAV;AAUD,OAfM,CAAP;AAgBD,K;;UACDO,e,GAAkB,UAACC,IAAD,EAAU;AAC1B,aAAOA,IAAI,CAACC,GAAL,CAAS,UAACC,IAAD,EAAU;AACxB,YAAIA,IAAI,CAACR,QAAT,EAAmB;AACjB,iBACE,oBAAC,QAAD;AAAU,YAAA,KAAK,EAAEQ,IAAI,CAAChB,KAAtB;AAA6B,YAAA,GAAG,EAAEgB,IAAI,CAACf,GAAvC;AAA4C,YAAA,OAAO,EAAEe,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,MAAKH,eAAL,CAAqBG,IAAI,CAACR,QAA1B,CADH,CADF;AAKD;;AACD,eAAO,oBAAC,QAAD,oBAAcQ,IAAd;AAAoB,UAAA,OAAO,EAAEA,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,OATM,CAAP;AAUD,K;;;;;;;6BAEQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,WAAZ;AAAwB,QAAA,SAAS,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,EAAE,KAAKb,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKU,eAAL,CAAqB,KAAKf,KAAL,CAAWC,QAAhC,CADH,CADF,CADF;AAOD;;;;EA/CoBN,KAAK,CAACwB,S;;AAmD7B,eAAepB,QAAf","sourcesContent":["import React from \"react\";\nimport {Card, Tree} from \"antd\";\n\nconst TreeNode = Tree.TreeNode;\n\nclass LoadData extends React.Component {\n  state = {\n    treeData: [\n      {title: 'Expand to load', key: '0'},\n      {title: 'Expand to load', key: '1'},\n      {title: 'Tree Node', key: '2', isLeaf: true},\n    ],\n  };\n  onLoadData = (treeNode) => {\n    return new Promise((resolve) => {\n      if (treeNode.props.children) {\n        resolve();\n        return;\n      }\n      setTimeout(() => {\n        treeNode.props.dataRef.children = [\n          {title: 'Child Node', key: `${treeNode.props.eventKey}-0`},\n          {title: 'Child Node', key: `${treeNode.props.eventKey}-1`},\n        ];\n        this.setState({\n          treeData: [...this.state.treeData],\n        });\n        resolve();\n      }, 1000);\n    });\n  };\n  renderTreeNodes = (data) => {\n    return data.map((item) => {\n      if (item.children) {\n        return (\n          <TreeNode title={item.title} key={item.key} dataRef={item}>\n            {this.renderTreeNodes(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode {...item} dataRef={item}/>;\n    });\n  };\n\n  render() {\n    return (\n      <Card title=\"Load Data\" className=\"gx-card\">\n        <Tree loadData={this.onLoadData}>\n          {this.renderTreeNodes(this.state.treeData)}\n        </Tree>\n      </Card>\n    );\n  }\n}\n\n\nexport default LoadData;\n"]},"metadata":{},"sourceType":"module"}