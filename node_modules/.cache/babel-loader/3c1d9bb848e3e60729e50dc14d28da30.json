{"ast":null,"code":"import _classCallCheck from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tuguldursaikhan/Desktop/kaizen/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/feedback/PopConfirm/ConditionalTrigger.js\";\nimport React from \"react\";\nimport { Card, message, Popconfirm, Switch } from \"antd\";\n\nvar ConditionalTrigger =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConditionalTrigger, _React$Component);\n\n  function ConditionalTrigger() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ConditionalTrigger);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ConditionalTrigger)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visible: false,\n      condition: true // Whether meet the condition, if not show popconfirm.\n\n    };\n\n    _this.changeCondition = function (value) {\n      _this.setState({\n        condition: value\n      });\n    };\n\n    _this.confirm = function () {\n      _this.setState({\n        visible: false\n      });\n\n      message.success('Next step.');\n    };\n\n    _this.cancel = function () {\n      _this.setState({\n        visible: false\n      });\n\n      message.error('Click on cancel.');\n    };\n\n    _this.handleVisibleChange = function (visible) {\n      if (!visible) {\n        _this.setState({\n          visible: visible\n        });\n\n        return;\n      } // Determining condition before show the popconfirm.\n\n\n      console.log(_this.state.condition);\n\n      if (_this.state.condition) {\n        _this.confirm(); // next step\n\n      } else {\n        _this.setState({\n          visible: visible\n        }); // show the popconfirm\n\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ConditionalTrigger, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Card, {\n        title: \"Conditional Trigger\",\n        className: \"gx-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Popconfirm, {\n        title: \"Are you sure delete this task?\",\n        visible: this.state.visible,\n        onVisibleChange: this.handleVisibleChange,\n        onConfirm: this.confirm,\n        onCancel: this.cancel,\n        okText: \"Yes\",\n        cancelText: \"No\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"gx-mb-3 gx-d-block\",\n        href: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Delete a task\")), \"Whether directly execute\\uFF1A\", React.createElement(Switch, {\n        defaultChecked: true,\n        onChange: this.changeCondition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ConditionalTrigger;\n}(React.Component);\n\nexport default ConditionalTrigger;","map":{"version":3,"sources":["/home/tuguldursaikhan/Desktop/kaizen/src/routes/components/feedback/PopConfirm/ConditionalTrigger.js"],"names":["React","Card","message","Popconfirm","Switch","ConditionalTrigger","state","visible","condition","changeCondition","value","setState","confirm","success","cancel","error","handleVisibleChange","console","log","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,OAAd,EAAuBC,UAAvB,EAAmCC,MAAnC,QAAgD,MAAhD;;IAEMC,kB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,SAAS,EAAE,IAFL,CAEW;;AAFX,K;;UAIRC,e,GAAkB,UAACC,KAAD,EAAW;AAC3B,YAAKC,QAAL,CAAc;AAACH,QAAAA,SAAS,EAAEE;AAAZ,OAAd;AACD,K;;UACDE,O,GAAU,YAAM;AACd,YAAKD,QAAL,CAAc;AAACJ,QAAAA,OAAO,EAAE;AAAV,OAAd;;AACAL,MAAAA,OAAO,CAACW,OAAR,CAAgB,YAAhB;AACD,K;;UACDC,M,GAAS,YAAM;AACb,YAAKH,QAAL,CAAc;AAACJ,QAAAA,OAAO,EAAE;AAAV,OAAd;;AACAL,MAAAA,OAAO,CAACa,KAAR,CAAc,kBAAd;AACD,K;;UACDC,mB,GAAsB,UAACT,OAAD,EAAa;AACjC,UAAI,CAACA,OAAL,EAAc;AACZ,cAAKI,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAPA;AAAD,SAAd;;AACA;AACD,OAJgC,CAKjC;;;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKZ,KAAL,CAAWE,SAAvB;;AACA,UAAI,MAAKF,KAAL,CAAWE,SAAf,EAA0B;AACxB,cAAKI,OAAL,GADwB,CACR;;AACjB,OAFD,MAEO;AACL,cAAKD,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAPA;AAAD,SAAd,EADK,CACqB;;AAC3B;AACF,K;;;;;;;6BAEQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,qBAAZ;AAAkC,QAAA,SAAS,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,KAAK,EAAC,gCADR;AAEE,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAFtB;AAGE,QAAA,eAAe,EAAE,KAAKS,mBAHxB;AAIE,QAAA,SAAS,EAAE,KAAKJ,OAJlB;AAKE,QAAA,QAAQ,EAAE,KAAKE,MALjB;AAME,QAAA,MAAM,EAAC,KANT;AAOE,QAAA,UAAU,EAAC,IAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASE;AAAG,QAAA,SAAS,EAAC,oBAAb;AAAkC,QAAA,IAAI,EAAC,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBATF,CADF,oCAa2B,oBAAC,MAAD;AAAQ,QAAA,cAAc,MAAtB;AAAuB,QAAA,QAAQ,EAAE,KAAKL,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAb3B,CADF;AAiBD;;;;EAhD8BT,KAAK,CAACmB,S;;AAmDvC,eAAed,kBAAf","sourcesContent":["import React from \"react\";\nimport {Card, message, Popconfirm, Switch} from \"antd\";\n\nclass ConditionalTrigger extends React.Component {\n  state = {\n    visible: false,\n    condition: true, // Whether meet the condition, if not show popconfirm.\n  };\n  changeCondition = (value) => {\n    this.setState({condition: value});\n  };\n  confirm = () => {\n    this.setState({visible: false});\n    message.success('Next step.');\n  };\n  cancel = () => {\n    this.setState({visible: false});\n    message.error('Click on cancel.');\n  };\n  handleVisibleChange = (visible) => {\n    if (!visible) {\n      this.setState({visible});\n      return;\n    }\n    // Determining condition before show the popconfirm.\n    console.log(this.state.condition);\n    if (this.state.condition) {\n      this.confirm(); // next step\n    } else {\n      this.setState({visible}); // show the popconfirm\n    }\n  };\n\n  render() {\n    return (\n      <Card title=\"Conditional Trigger\" className=\"gx-card\">\n        <Popconfirm\n          title=\"Are you sure delete this task?\"\n          visible={this.state.visible}\n          onVisibleChange={this.handleVisibleChange}\n          onConfirm={this.confirm}\n          onCancel={this.cancel}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <a className=\"gx-mb-3 gx-d-block\" href=\"/\">Delete a task</a>\n        </Popconfirm>\n\n        Whether directly executeï¼š<Switch defaultChecked onChange={this.changeCondition}/>\n      </Card>\n    );\n  }\n}\n\nexport default ConditionalTrigger;\n"]},"metadata":{},"sourceType":"module"}